
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Teams
 * 
 */
export type Teams = $Result.DefaultSelection<Prisma.$TeamsPayload>
/**
 * Model TeamMembers
 * 
 */
export type TeamMembers = $Result.DefaultSelection<Prisma.$TeamMembersPayload>
/**
 * Model UserTodos
 * 
 */
export type UserTodos = $Result.DefaultSelection<Prisma.$UserTodosPayload>
/**
 * Model TeamTodos
 * 
 */
export type TeamTodos = $Result.DefaultSelection<Prisma.$TeamTodosPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teams`: Exposes CRUD operations for the **Teams** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.teams.findMany()
    * ```
    */
  get teams(): Prisma.TeamsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teamMembers`: Exposes CRUD operations for the **TeamMembers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamMembers
    * const teamMembers = await prisma.teamMembers.findMany()
    * ```
    */
  get teamMembers(): Prisma.TeamMembersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userTodos`: Exposes CRUD operations for the **UserTodos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserTodos
    * const userTodos = await prisma.userTodos.findMany()
    * ```
    */
  get userTodos(): Prisma.UserTodosDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teamTodos`: Exposes CRUD operations for the **TeamTodos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamTodos
    * const teamTodos = await prisma.teamTodos.findMany()
    * ```
    */
  get teamTodos(): Prisma.TeamTodosDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Teams: 'Teams',
    TeamMembers: 'TeamMembers',
    UserTodos: 'UserTodos',
    TeamTodos: 'TeamTodos'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "users" | "teams" | "teamMembers" | "userTodos" | "teamTodos"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Teams: {
        payload: Prisma.$TeamsPayload<ExtArgs>
        fields: Prisma.TeamsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>
          }
          findFirst: {
            args: Prisma.TeamsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>
          }
          findMany: {
            args: Prisma.TeamsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>[]
          }
          create: {
            args: Prisma.TeamsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>
          }
          createMany: {
            args: Prisma.TeamsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TeamsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>
          }
          update: {
            args: Prisma.TeamsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>
          }
          deleteMany: {
            args: Prisma.TeamsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>
          }
          aggregate: {
            args: Prisma.TeamsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeams>
          }
          groupBy: {
            args: Prisma.TeamsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamsGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamsCountArgs<ExtArgs>
            result: $Utils.Optional<TeamsCountAggregateOutputType> | number
          }
        }
      }
      TeamMembers: {
        payload: Prisma.$TeamMembersPayload<ExtArgs>
        fields: Prisma.TeamMembersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamMembersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamMembersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload>
          }
          findFirst: {
            args: Prisma.TeamMembersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamMembersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload>
          }
          findMany: {
            args: Prisma.TeamMembersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload>[]
          }
          create: {
            args: Prisma.TeamMembersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload>
          }
          createMany: {
            args: Prisma.TeamMembersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TeamMembersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload>
          }
          update: {
            args: Prisma.TeamMembersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload>
          }
          deleteMany: {
            args: Prisma.TeamMembersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamMembersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamMembersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload>
          }
          aggregate: {
            args: Prisma.TeamMembersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamMembers>
          }
          groupBy: {
            args: Prisma.TeamMembersGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamMembersGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamMembersCountArgs<ExtArgs>
            result: $Utils.Optional<TeamMembersCountAggregateOutputType> | number
          }
        }
      }
      UserTodos: {
        payload: Prisma.$UserTodosPayload<ExtArgs>
        fields: Prisma.UserTodosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserTodosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTodosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserTodosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTodosPayload>
          }
          findFirst: {
            args: Prisma.UserTodosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTodosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserTodosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTodosPayload>
          }
          findMany: {
            args: Prisma.UserTodosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTodosPayload>[]
          }
          create: {
            args: Prisma.UserTodosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTodosPayload>
          }
          createMany: {
            args: Prisma.UserTodosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserTodosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTodosPayload>
          }
          update: {
            args: Prisma.UserTodosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTodosPayload>
          }
          deleteMany: {
            args: Prisma.UserTodosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserTodosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserTodosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTodosPayload>
          }
          aggregate: {
            args: Prisma.UserTodosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserTodos>
          }
          groupBy: {
            args: Prisma.UserTodosGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserTodosGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserTodosCountArgs<ExtArgs>
            result: $Utils.Optional<UserTodosCountAggregateOutputType> | number
          }
        }
      }
      TeamTodos: {
        payload: Prisma.$TeamTodosPayload<ExtArgs>
        fields: Prisma.TeamTodosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamTodosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamTodosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamTodosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamTodosPayload>
          }
          findFirst: {
            args: Prisma.TeamTodosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamTodosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamTodosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamTodosPayload>
          }
          findMany: {
            args: Prisma.TeamTodosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamTodosPayload>[]
          }
          create: {
            args: Prisma.TeamTodosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamTodosPayload>
          }
          createMany: {
            args: Prisma.TeamTodosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TeamTodosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamTodosPayload>
          }
          update: {
            args: Prisma.TeamTodosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamTodosPayload>
          }
          deleteMany: {
            args: Prisma.TeamTodosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamTodosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamTodosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamTodosPayload>
          }
          aggregate: {
            args: Prisma.TeamTodosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamTodos>
          }
          groupBy: {
            args: Prisma.TeamTodosGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamTodosGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamTodosCountArgs<ExtArgs>
            result: $Utils.Optional<TeamTodosCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    users?: UsersOmit
    teams?: TeamsOmit
    teamMembers?: TeamMembersOmit
    userTodos?: UserTodosOmit
    teamTodos?: TeamTodosOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    userTodos: number
    teams: number
    memberships: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userTodos?: boolean | UsersCountOutputTypeCountUserTodosArgs
    teams?: boolean | UsersCountOutputTypeCountTeamsArgs
    memberships?: boolean | UsersCountOutputTypeCountMembershipsArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountUserTodosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserTodosWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMembersWhereInput
  }


  /**
   * Count Type TeamsCountOutputType
   */

  export type TeamsCountOutputType = {
    members: number
    teamTodos: number
  }

  export type TeamsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | TeamsCountOutputTypeCountMembersArgs
    teamTodos?: boolean | TeamsCountOutputTypeCountTeamTodosArgs
  }

  // Custom InputTypes
  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamsCountOutputType
     */
    select?: TeamsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMembersWhereInput
  }

  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeCountTeamTodosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamTodosWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    password: number
    createdAt: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    password?: true
    createdAt?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    password?: true
    createdAt?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    password?: true
    createdAt?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    password: string
    createdAt: Date
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    password?: boolean
    createdAt?: boolean
    userTodos?: boolean | Users$userTodosArgs<ExtArgs>
    teams?: boolean | Users$teamsArgs<ExtArgs>
    memberships?: boolean | Users$membershipsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>



  export type UsersSelectScalar = {
    id?: boolean
    password?: boolean
    createdAt?: boolean
  }

  export type UsersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "password" | "createdAt", ExtArgs["result"]["users"]>
  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userTodos?: boolean | Users$userTodosArgs<ExtArgs>
    teams?: boolean | Users$teamsArgs<ExtArgs>
    memberships?: boolean | Users$membershipsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      userTodos: Prisma.$UserTodosPayload<ExtArgs>[]
      teams: Prisma.$TeamsPayload<ExtArgs>[]
      memberships: Prisma.$TeamMembersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      password: string
      createdAt: Date
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userTodos<T extends Users$userTodosArgs<ExtArgs> = {}>(args?: Subset<T, Users$userTodosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTodosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teams<T extends Users$teamsArgs<ExtArgs> = {}>(args?: Subset<T, Users$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    memberships<T extends Users$membershipsArgs<ExtArgs> = {}>(args?: Subset<T, Users$membershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly createdAt: FieldRef<"Users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * Users.userTodos
   */
  export type Users$userTodosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTodos
     */
    select?: UserTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTodos
     */
    omit?: UserTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTodosInclude<ExtArgs> | null
    where?: UserTodosWhereInput
    orderBy?: UserTodosOrderByWithRelationInput | UserTodosOrderByWithRelationInput[]
    cursor?: UserTodosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserTodosScalarFieldEnum | UserTodosScalarFieldEnum[]
  }

  /**
   * Users.teams
   */
  export type Users$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    where?: TeamsWhereInput
    orderBy?: TeamsOrderByWithRelationInput | TeamsOrderByWithRelationInput[]
    cursor?: TeamsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * Users.memberships
   */
  export type Users$membershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    where?: TeamMembersWhereInput
    orderBy?: TeamMembersOrderByWithRelationInput | TeamMembersOrderByWithRelationInput[]
    cursor?: TeamMembersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamMembersScalarFieldEnum | TeamMembersScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model Teams
   */

  export type AggregateTeams = {
    _count: TeamsCountAggregateOutputType | null
    _avg: TeamsAvgAggregateOutputType | null
    _sum: TeamsSumAggregateOutputType | null
    _min: TeamsMinAggregateOutputType | null
    _max: TeamsMaxAggregateOutputType | null
  }

  export type TeamsAvgAggregateOutputType = {
    id: number | null
  }

  export type TeamsSumAggregateOutputType = {
    id: number | null
  }

  export type TeamsMinAggregateOutputType = {
    id: number | null
    name: string | null
    adminId: string | null
  }

  export type TeamsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    adminId: string | null
  }

  export type TeamsCountAggregateOutputType = {
    id: number
    name: number
    adminId: number
    _all: number
  }


  export type TeamsAvgAggregateInputType = {
    id?: true
  }

  export type TeamsSumAggregateInputType = {
    id?: true
  }

  export type TeamsMinAggregateInputType = {
    id?: true
    name?: true
    adminId?: true
  }

  export type TeamsMaxAggregateInputType = {
    id?: true
    name?: true
    adminId?: true
  }

  export type TeamsCountAggregateInputType = {
    id?: true
    name?: true
    adminId?: true
    _all?: true
  }

  export type TeamsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to aggregate.
     */
    where?: TeamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamsOrderByWithRelationInput | TeamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamsMaxAggregateInputType
  }

  export type GetTeamsAggregateType<T extends TeamsAggregateArgs> = {
        [P in keyof T & keyof AggregateTeams]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeams[P]>
      : GetScalarType<T[P], AggregateTeams[P]>
  }




  export type TeamsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamsWhereInput
    orderBy?: TeamsOrderByWithAggregationInput | TeamsOrderByWithAggregationInput[]
    by: TeamsScalarFieldEnum[] | TeamsScalarFieldEnum
    having?: TeamsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamsCountAggregateInputType | true
    _avg?: TeamsAvgAggregateInputType
    _sum?: TeamsSumAggregateInputType
    _min?: TeamsMinAggregateInputType
    _max?: TeamsMaxAggregateInputType
  }

  export type TeamsGroupByOutputType = {
    id: number
    name: string
    adminId: string
    _count: TeamsCountAggregateOutputType | null
    _avg: TeamsAvgAggregateOutputType | null
    _sum: TeamsSumAggregateOutputType | null
    _min: TeamsMinAggregateOutputType | null
    _max: TeamsMaxAggregateOutputType | null
  }

  type GetTeamsGroupByPayload<T extends TeamsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamsGroupByOutputType[P]>
            : GetScalarType<T[P], TeamsGroupByOutputType[P]>
        }
      >
    >


  export type TeamsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    adminId?: boolean
    admin?: boolean | UsersDefaultArgs<ExtArgs>
    members?: boolean | Teams$membersArgs<ExtArgs>
    teamTodos?: boolean | Teams$teamTodosArgs<ExtArgs>
    _count?: boolean | TeamsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teams"]>



  export type TeamsSelectScalar = {
    id?: boolean
    name?: boolean
    adminId?: boolean
  }

  export type TeamsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "adminId", ExtArgs["result"]["teams"]>
  export type TeamsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UsersDefaultArgs<ExtArgs>
    members?: boolean | Teams$membersArgs<ExtArgs>
    teamTodos?: boolean | Teams$teamTodosArgs<ExtArgs>
    _count?: boolean | TeamsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TeamsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Teams"
    objects: {
      admin: Prisma.$UsersPayload<ExtArgs>
      members: Prisma.$TeamMembersPayload<ExtArgs>[]
      teamTodos: Prisma.$TeamTodosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      adminId: string
    }, ExtArgs["result"]["teams"]>
    composites: {}
  }

  type TeamsGetPayload<S extends boolean | null | undefined | TeamsDefaultArgs> = $Result.GetResult<Prisma.$TeamsPayload, S>

  type TeamsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamsCountAggregateInputType | true
    }

  export interface TeamsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Teams'], meta: { name: 'Teams' } }
    /**
     * Find zero or one Teams that matches the filter.
     * @param {TeamsFindUniqueArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamsFindUniqueArgs>(args: SelectSubset<T, TeamsFindUniqueArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Teams that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamsFindUniqueOrThrowArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamsFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsFindFirstArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamsFindFirstArgs>(args?: SelectSubset<T, TeamsFindFirstArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teams that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsFindFirstOrThrowArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamsFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamsFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.teams.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.teams.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamsWithIdOnly = await prisma.teams.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamsFindManyArgs>(args?: SelectSubset<T, TeamsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Teams.
     * @param {TeamsCreateArgs} args - Arguments to create a Teams.
     * @example
     * // Create one Teams
     * const Teams = await prisma.teams.create({
     *   data: {
     *     // ... data to create a Teams
     *   }
     * })
     * 
     */
    create<T extends TeamsCreateArgs>(args: SelectSubset<T, TeamsCreateArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teams.
     * @param {TeamsCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const teams = await prisma.teams.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamsCreateManyArgs>(args?: SelectSubset<T, TeamsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Teams.
     * @param {TeamsDeleteArgs} args - Arguments to delete one Teams.
     * @example
     * // Delete one Teams
     * const Teams = await prisma.teams.delete({
     *   where: {
     *     // ... filter to delete one Teams
     *   }
     * })
     * 
     */
    delete<T extends TeamsDeleteArgs>(args: SelectSubset<T, TeamsDeleteArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Teams.
     * @param {TeamsUpdateArgs} args - Arguments to update one Teams.
     * @example
     * // Update one Teams
     * const teams = await prisma.teams.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamsUpdateArgs>(args: SelectSubset<T, TeamsUpdateArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teams.
     * @param {TeamsDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.teams.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamsDeleteManyArgs>(args?: SelectSubset<T, TeamsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const teams = await prisma.teams.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamsUpdateManyArgs>(args: SelectSubset<T, TeamsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Teams.
     * @param {TeamsUpsertArgs} args - Arguments to update or create a Teams.
     * @example
     * // Update or create a Teams
     * const teams = await prisma.teams.upsert({
     *   create: {
     *     // ... data to create a Teams
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teams we want to update
     *   }
     * })
     */
    upsert<T extends TeamsUpsertArgs>(args: SelectSubset<T, TeamsUpsertArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.teams.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamsCountArgs>(
      args?: Subset<T, TeamsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamsAggregateArgs>(args: Subset<T, TeamsAggregateArgs>): Prisma.PrismaPromise<GetTeamsAggregateType<T>>

    /**
     * Group by Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamsGroupByArgs['orderBy'] }
        : { orderBy?: TeamsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Teams model
   */
  readonly fields: TeamsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Teams.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    members<T extends Teams$membersArgs<ExtArgs> = {}>(args?: Subset<T, Teams$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teamTodos<T extends Teams$teamTodosArgs<ExtArgs> = {}>(args?: Subset<T, Teams$teamTodosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamTodosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Teams model
   */
  interface TeamsFieldRefs {
    readonly id: FieldRef<"Teams", 'Int'>
    readonly name: FieldRef<"Teams", 'String'>
    readonly adminId: FieldRef<"Teams", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Teams findUnique
   */
  export type TeamsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where: TeamsWhereUniqueInput
  }

  /**
   * Teams findUniqueOrThrow
   */
  export type TeamsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where: TeamsWhereUniqueInput
  }

  /**
   * Teams findFirst
   */
  export type TeamsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamsOrderByWithRelationInput | TeamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * Teams findFirstOrThrow
   */
  export type TeamsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamsOrderByWithRelationInput | TeamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * Teams findMany
   */
  export type TeamsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamsOrderByWithRelationInput | TeamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * Teams create
   */
  export type TeamsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * The data needed to create a Teams.
     */
    data: XOR<TeamsCreateInput, TeamsUncheckedCreateInput>
  }

  /**
   * Teams createMany
   */
  export type TeamsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamsCreateManyInput | TeamsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Teams update
   */
  export type TeamsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * The data needed to update a Teams.
     */
    data: XOR<TeamsUpdateInput, TeamsUncheckedUpdateInput>
    /**
     * Choose, which Teams to update.
     */
    where: TeamsWhereUniqueInput
  }

  /**
   * Teams updateMany
   */
  export type TeamsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamsUpdateManyMutationInput, TeamsUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamsWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
  }

  /**
   * Teams upsert
   */
  export type TeamsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * The filter to search for the Teams to update in case it exists.
     */
    where: TeamsWhereUniqueInput
    /**
     * In case the Teams found by the `where` argument doesn't exist, create a new Teams with this data.
     */
    create: XOR<TeamsCreateInput, TeamsUncheckedCreateInput>
    /**
     * In case the Teams was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamsUpdateInput, TeamsUncheckedUpdateInput>
  }

  /**
   * Teams delete
   */
  export type TeamsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * Filter which Teams to delete.
     */
    where: TeamsWhereUniqueInput
  }

  /**
   * Teams deleteMany
   */
  export type TeamsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamsWhereInput
    /**
     * Limit how many Teams to delete.
     */
    limit?: number
  }

  /**
   * Teams.members
   */
  export type Teams$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    where?: TeamMembersWhereInput
    orderBy?: TeamMembersOrderByWithRelationInput | TeamMembersOrderByWithRelationInput[]
    cursor?: TeamMembersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamMembersScalarFieldEnum | TeamMembersScalarFieldEnum[]
  }

  /**
   * Teams.teamTodos
   */
  export type Teams$teamTodosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamTodos
     */
    select?: TeamTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamTodos
     */
    omit?: TeamTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamTodosInclude<ExtArgs> | null
    where?: TeamTodosWhereInput
    orderBy?: TeamTodosOrderByWithRelationInput | TeamTodosOrderByWithRelationInput[]
    cursor?: TeamTodosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamTodosScalarFieldEnum | TeamTodosScalarFieldEnum[]
  }

  /**
   * Teams without action
   */
  export type TeamsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
  }


  /**
   * Model TeamMembers
   */

  export type AggregateTeamMembers = {
    _count: TeamMembersCountAggregateOutputType | null
    _avg: TeamMembersAvgAggregateOutputType | null
    _sum: TeamMembersSumAggregateOutputType | null
    _min: TeamMembersMinAggregateOutputType | null
    _max: TeamMembersMaxAggregateOutputType | null
  }

  export type TeamMembersAvgAggregateOutputType = {
    id: number | null
    teamId: number | null
  }

  export type TeamMembersSumAggregateOutputType = {
    id: number | null
    teamId: number | null
  }

  export type TeamMembersMinAggregateOutputType = {
    id: number | null
    userId: string | null
    teamId: number | null
  }

  export type TeamMembersMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    teamId: number | null
  }

  export type TeamMembersCountAggregateOutputType = {
    id: number
    userId: number
    teamId: number
    _all: number
  }


  export type TeamMembersAvgAggregateInputType = {
    id?: true
    teamId?: true
  }

  export type TeamMembersSumAggregateInputType = {
    id?: true
    teamId?: true
  }

  export type TeamMembersMinAggregateInputType = {
    id?: true
    userId?: true
    teamId?: true
  }

  export type TeamMembersMaxAggregateInputType = {
    id?: true
    userId?: true
    teamId?: true
  }

  export type TeamMembersCountAggregateInputType = {
    id?: true
    userId?: true
    teamId?: true
    _all?: true
  }

  export type TeamMembersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamMembers to aggregate.
     */
    where?: TeamMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMembersOrderByWithRelationInput | TeamMembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamMembers
    **/
    _count?: true | TeamMembersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamMembersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamMembersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMembersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMembersMaxAggregateInputType
  }

  export type GetTeamMembersAggregateType<T extends TeamMembersAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamMembers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamMembers[P]>
      : GetScalarType<T[P], AggregateTeamMembers[P]>
  }




  export type TeamMembersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMembersWhereInput
    orderBy?: TeamMembersOrderByWithAggregationInput | TeamMembersOrderByWithAggregationInput[]
    by: TeamMembersScalarFieldEnum[] | TeamMembersScalarFieldEnum
    having?: TeamMembersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamMembersCountAggregateInputType | true
    _avg?: TeamMembersAvgAggregateInputType
    _sum?: TeamMembersSumAggregateInputType
    _min?: TeamMembersMinAggregateInputType
    _max?: TeamMembersMaxAggregateInputType
  }

  export type TeamMembersGroupByOutputType = {
    id: number
    userId: string
    teamId: number
    _count: TeamMembersCountAggregateOutputType | null
    _avg: TeamMembersAvgAggregateOutputType | null
    _sum: TeamMembersSumAggregateOutputType | null
    _min: TeamMembersMinAggregateOutputType | null
    _max: TeamMembersMaxAggregateOutputType | null
  }

  type GetTeamMembersGroupByPayload<T extends TeamMembersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamMembersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamMembersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamMembersGroupByOutputType[P]>
            : GetScalarType<T[P], TeamMembersGroupByOutputType[P]>
        }
      >
    >


  export type TeamMembersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    teamId?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    team?: boolean | TeamsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMembers"]>



  export type TeamMembersSelectScalar = {
    id?: boolean
    userId?: boolean
    teamId?: boolean
  }

  export type TeamMembersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "teamId", ExtArgs["result"]["teamMembers"]>
  export type TeamMembersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    team?: boolean | TeamsDefaultArgs<ExtArgs>
  }

  export type $TeamMembersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamMembers"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      team: Prisma.$TeamsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      teamId: number
    }, ExtArgs["result"]["teamMembers"]>
    composites: {}
  }

  type TeamMembersGetPayload<S extends boolean | null | undefined | TeamMembersDefaultArgs> = $Result.GetResult<Prisma.$TeamMembersPayload, S>

  type TeamMembersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamMembersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamMembersCountAggregateInputType | true
    }

  export interface TeamMembersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamMembers'], meta: { name: 'TeamMembers' } }
    /**
     * Find zero or one TeamMembers that matches the filter.
     * @param {TeamMembersFindUniqueArgs} args - Arguments to find a TeamMembers
     * @example
     * // Get one TeamMembers
     * const teamMembers = await prisma.teamMembers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamMembersFindUniqueArgs>(args: SelectSubset<T, TeamMembersFindUniqueArgs<ExtArgs>>): Prisma__TeamMembersClient<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeamMembers that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamMembersFindUniqueOrThrowArgs} args - Arguments to find a TeamMembers
     * @example
     * // Get one TeamMembers
     * const teamMembers = await prisma.teamMembers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamMembersFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamMembersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamMembersClient<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembersFindFirstArgs} args - Arguments to find a TeamMembers
     * @example
     * // Get one TeamMembers
     * const teamMembers = await prisma.teamMembers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamMembersFindFirstArgs>(args?: SelectSubset<T, TeamMembersFindFirstArgs<ExtArgs>>): Prisma__TeamMembersClient<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamMembers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembersFindFirstOrThrowArgs} args - Arguments to find a TeamMembers
     * @example
     * // Get one TeamMembers
     * const teamMembers = await prisma.teamMembers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamMembersFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamMembersFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamMembersClient<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeamMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamMembers
     * const teamMembers = await prisma.teamMembers.findMany()
     * 
     * // Get first 10 TeamMembers
     * const teamMembers = await prisma.teamMembers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamMembersWithIdOnly = await prisma.teamMembers.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamMembersFindManyArgs>(args?: SelectSubset<T, TeamMembersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeamMembers.
     * @param {TeamMembersCreateArgs} args - Arguments to create a TeamMembers.
     * @example
     * // Create one TeamMembers
     * const TeamMembers = await prisma.teamMembers.create({
     *   data: {
     *     // ... data to create a TeamMembers
     *   }
     * })
     * 
     */
    create<T extends TeamMembersCreateArgs>(args: SelectSubset<T, TeamMembersCreateArgs<ExtArgs>>): Prisma__TeamMembersClient<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeamMembers.
     * @param {TeamMembersCreateManyArgs} args - Arguments to create many TeamMembers.
     * @example
     * // Create many TeamMembers
     * const teamMembers = await prisma.teamMembers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamMembersCreateManyArgs>(args?: SelectSubset<T, TeamMembersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TeamMembers.
     * @param {TeamMembersDeleteArgs} args - Arguments to delete one TeamMembers.
     * @example
     * // Delete one TeamMembers
     * const TeamMembers = await prisma.teamMembers.delete({
     *   where: {
     *     // ... filter to delete one TeamMembers
     *   }
     * })
     * 
     */
    delete<T extends TeamMembersDeleteArgs>(args: SelectSubset<T, TeamMembersDeleteArgs<ExtArgs>>): Prisma__TeamMembersClient<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeamMembers.
     * @param {TeamMembersUpdateArgs} args - Arguments to update one TeamMembers.
     * @example
     * // Update one TeamMembers
     * const teamMembers = await prisma.teamMembers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamMembersUpdateArgs>(args: SelectSubset<T, TeamMembersUpdateArgs<ExtArgs>>): Prisma__TeamMembersClient<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeamMembers.
     * @param {TeamMembersDeleteManyArgs} args - Arguments to filter TeamMembers to delete.
     * @example
     * // Delete a few TeamMembers
     * const { count } = await prisma.teamMembers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamMembersDeleteManyArgs>(args?: SelectSubset<T, TeamMembersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamMembers
     * const teamMembers = await prisma.teamMembers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamMembersUpdateManyArgs>(args: SelectSubset<T, TeamMembersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TeamMembers.
     * @param {TeamMembersUpsertArgs} args - Arguments to update or create a TeamMembers.
     * @example
     * // Update or create a TeamMembers
     * const teamMembers = await prisma.teamMembers.upsert({
     *   create: {
     *     // ... data to create a TeamMembers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamMembers we want to update
     *   }
     * })
     */
    upsert<T extends TeamMembersUpsertArgs>(args: SelectSubset<T, TeamMembersUpsertArgs<ExtArgs>>): Prisma__TeamMembersClient<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembersCountArgs} args - Arguments to filter TeamMembers to count.
     * @example
     * // Count the number of TeamMembers
     * const count = await prisma.teamMembers.count({
     *   where: {
     *     // ... the filter for the TeamMembers we want to count
     *   }
     * })
    **/
    count<T extends TeamMembersCountArgs>(
      args?: Subset<T, TeamMembersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamMembersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamMembersAggregateArgs>(args: Subset<T, TeamMembersAggregateArgs>): Prisma.PrismaPromise<GetTeamMembersAggregateType<T>>

    /**
     * Group by TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamMembersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamMembersGroupByArgs['orderBy'] }
        : { orderBy?: TeamMembersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamMembersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamMembersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamMembers model
   */
  readonly fields: TeamMembersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamMembers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamMembersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    team<T extends TeamsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamsDefaultArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamMembers model
   */
  interface TeamMembersFieldRefs {
    readonly id: FieldRef<"TeamMembers", 'Int'>
    readonly userId: FieldRef<"TeamMembers", 'String'>
    readonly teamId: FieldRef<"TeamMembers", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TeamMembers findUnique
   */
  export type TeamMembersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembers to fetch.
     */
    where: TeamMembersWhereUniqueInput
  }

  /**
   * TeamMembers findUniqueOrThrow
   */
  export type TeamMembersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembers to fetch.
     */
    where: TeamMembersWhereUniqueInput
  }

  /**
   * TeamMembers findFirst
   */
  export type TeamMembersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembers to fetch.
     */
    where?: TeamMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMembersOrderByWithRelationInput | TeamMembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamMembers.
     */
    cursor?: TeamMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamMembers.
     */
    distinct?: TeamMembersScalarFieldEnum | TeamMembersScalarFieldEnum[]
  }

  /**
   * TeamMembers findFirstOrThrow
   */
  export type TeamMembersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembers to fetch.
     */
    where?: TeamMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMembersOrderByWithRelationInput | TeamMembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamMembers.
     */
    cursor?: TeamMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamMembers.
     */
    distinct?: TeamMembersScalarFieldEnum | TeamMembersScalarFieldEnum[]
  }

  /**
   * TeamMembers findMany
   */
  export type TeamMembersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembers to fetch.
     */
    where?: TeamMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMembersOrderByWithRelationInput | TeamMembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamMembers.
     */
    cursor?: TeamMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    distinct?: TeamMembersScalarFieldEnum | TeamMembersScalarFieldEnum[]
  }

  /**
   * TeamMembers create
   */
  export type TeamMembersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamMembers.
     */
    data: XOR<TeamMembersCreateInput, TeamMembersUncheckedCreateInput>
  }

  /**
   * TeamMembers createMany
   */
  export type TeamMembersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamMembers.
     */
    data: TeamMembersCreateManyInput | TeamMembersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeamMembers update
   */
  export type TeamMembersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamMembers.
     */
    data: XOR<TeamMembersUpdateInput, TeamMembersUncheckedUpdateInput>
    /**
     * Choose, which TeamMembers to update.
     */
    where: TeamMembersWhereUniqueInput
  }

  /**
   * TeamMembers updateMany
   */
  export type TeamMembersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamMembers.
     */
    data: XOR<TeamMembersUpdateManyMutationInput, TeamMembersUncheckedUpdateManyInput>
    /**
     * Filter which TeamMembers to update
     */
    where?: TeamMembersWhereInput
    /**
     * Limit how many TeamMembers to update.
     */
    limit?: number
  }

  /**
   * TeamMembers upsert
   */
  export type TeamMembersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamMembers to update in case it exists.
     */
    where: TeamMembersWhereUniqueInput
    /**
     * In case the TeamMembers found by the `where` argument doesn't exist, create a new TeamMembers with this data.
     */
    create: XOR<TeamMembersCreateInput, TeamMembersUncheckedCreateInput>
    /**
     * In case the TeamMembers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamMembersUpdateInput, TeamMembersUncheckedUpdateInput>
  }

  /**
   * TeamMembers delete
   */
  export type TeamMembersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    /**
     * Filter which TeamMembers to delete.
     */
    where: TeamMembersWhereUniqueInput
  }

  /**
   * TeamMembers deleteMany
   */
  export type TeamMembersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamMembers to delete
     */
    where?: TeamMembersWhereInput
    /**
     * Limit how many TeamMembers to delete.
     */
    limit?: number
  }

  /**
   * TeamMembers without action
   */
  export type TeamMembersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
  }


  /**
   * Model UserTodos
   */

  export type AggregateUserTodos = {
    _count: UserTodosCountAggregateOutputType | null
    _avg: UserTodosAvgAggregateOutputType | null
    _sum: UserTodosSumAggregateOutputType | null
    _min: UserTodosMinAggregateOutputType | null
    _max: UserTodosMaxAggregateOutputType | null
  }

  export type UserTodosAvgAggregateOutputType = {
    id: number | null
  }

  export type UserTodosSumAggregateOutputType = {
    id: number | null
  }

  export type UserTodosMinAggregateOutputType = {
    id: number | null
    userId: string | null
    contents: string | null
    isDone: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserTodosMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    contents: string | null
    isDone: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserTodosCountAggregateOutputType = {
    id: number
    userId: number
    contents: number
    isDone: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserTodosAvgAggregateInputType = {
    id?: true
  }

  export type UserTodosSumAggregateInputType = {
    id?: true
  }

  export type UserTodosMinAggregateInputType = {
    id?: true
    userId?: true
    contents?: true
    isDone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserTodosMaxAggregateInputType = {
    id?: true
    userId?: true
    contents?: true
    isDone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserTodosCountAggregateInputType = {
    id?: true
    userId?: true
    contents?: true
    isDone?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserTodosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserTodos to aggregate.
     */
    where?: UserTodosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTodos to fetch.
     */
    orderBy?: UserTodosOrderByWithRelationInput | UserTodosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserTodosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTodos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTodos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserTodos
    **/
    _count?: true | UserTodosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserTodosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserTodosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserTodosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserTodosMaxAggregateInputType
  }

  export type GetUserTodosAggregateType<T extends UserTodosAggregateArgs> = {
        [P in keyof T & keyof AggregateUserTodos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserTodos[P]>
      : GetScalarType<T[P], AggregateUserTodos[P]>
  }




  export type UserTodosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserTodosWhereInput
    orderBy?: UserTodosOrderByWithAggregationInput | UserTodosOrderByWithAggregationInput[]
    by: UserTodosScalarFieldEnum[] | UserTodosScalarFieldEnum
    having?: UserTodosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserTodosCountAggregateInputType | true
    _avg?: UserTodosAvgAggregateInputType
    _sum?: UserTodosSumAggregateInputType
    _min?: UserTodosMinAggregateInputType
    _max?: UserTodosMaxAggregateInputType
  }

  export type UserTodosGroupByOutputType = {
    id: number
    userId: string
    contents: string
    isDone: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserTodosCountAggregateOutputType | null
    _avg: UserTodosAvgAggregateOutputType | null
    _sum: UserTodosSumAggregateOutputType | null
    _min: UserTodosMinAggregateOutputType | null
    _max: UserTodosMaxAggregateOutputType | null
  }

  type GetUserTodosGroupByPayload<T extends UserTodosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserTodosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserTodosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserTodosGroupByOutputType[P]>
            : GetScalarType<T[P], UserTodosGroupByOutputType[P]>
        }
      >
    >


  export type UserTodosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    contents?: boolean
    isDone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userTodos"]>



  export type UserTodosSelectScalar = {
    id?: boolean
    userId?: boolean
    contents?: boolean
    isDone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserTodosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "contents" | "isDone" | "createdAt" | "updatedAt", ExtArgs["result"]["userTodos"]>
  export type UserTodosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $UserTodosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserTodos"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      contents: string
      isDone: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userTodos"]>
    composites: {}
  }

  type UserTodosGetPayload<S extends boolean | null | undefined | UserTodosDefaultArgs> = $Result.GetResult<Prisma.$UserTodosPayload, S>

  type UserTodosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserTodosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserTodosCountAggregateInputType | true
    }

  export interface UserTodosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserTodos'], meta: { name: 'UserTodos' } }
    /**
     * Find zero or one UserTodos that matches the filter.
     * @param {UserTodosFindUniqueArgs} args - Arguments to find a UserTodos
     * @example
     * // Get one UserTodos
     * const userTodos = await prisma.userTodos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserTodosFindUniqueArgs>(args: SelectSubset<T, UserTodosFindUniqueArgs<ExtArgs>>): Prisma__UserTodosClient<$Result.GetResult<Prisma.$UserTodosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserTodos that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserTodosFindUniqueOrThrowArgs} args - Arguments to find a UserTodos
     * @example
     * // Get one UserTodos
     * const userTodos = await prisma.userTodos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserTodosFindUniqueOrThrowArgs>(args: SelectSubset<T, UserTodosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserTodosClient<$Result.GetResult<Prisma.$UserTodosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserTodos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTodosFindFirstArgs} args - Arguments to find a UserTodos
     * @example
     * // Get one UserTodos
     * const userTodos = await prisma.userTodos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserTodosFindFirstArgs>(args?: SelectSubset<T, UserTodosFindFirstArgs<ExtArgs>>): Prisma__UserTodosClient<$Result.GetResult<Prisma.$UserTodosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserTodos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTodosFindFirstOrThrowArgs} args - Arguments to find a UserTodos
     * @example
     * // Get one UserTodos
     * const userTodos = await prisma.userTodos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserTodosFindFirstOrThrowArgs>(args?: SelectSubset<T, UserTodosFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserTodosClient<$Result.GetResult<Prisma.$UserTodosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserTodos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTodosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserTodos
     * const userTodos = await prisma.userTodos.findMany()
     * 
     * // Get first 10 UserTodos
     * const userTodos = await prisma.userTodos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userTodosWithIdOnly = await prisma.userTodos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserTodosFindManyArgs>(args?: SelectSubset<T, UserTodosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTodosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserTodos.
     * @param {UserTodosCreateArgs} args - Arguments to create a UserTodos.
     * @example
     * // Create one UserTodos
     * const UserTodos = await prisma.userTodos.create({
     *   data: {
     *     // ... data to create a UserTodos
     *   }
     * })
     * 
     */
    create<T extends UserTodosCreateArgs>(args: SelectSubset<T, UserTodosCreateArgs<ExtArgs>>): Prisma__UserTodosClient<$Result.GetResult<Prisma.$UserTodosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserTodos.
     * @param {UserTodosCreateManyArgs} args - Arguments to create many UserTodos.
     * @example
     * // Create many UserTodos
     * const userTodos = await prisma.userTodos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserTodosCreateManyArgs>(args?: SelectSubset<T, UserTodosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserTodos.
     * @param {UserTodosDeleteArgs} args - Arguments to delete one UserTodos.
     * @example
     * // Delete one UserTodos
     * const UserTodos = await prisma.userTodos.delete({
     *   where: {
     *     // ... filter to delete one UserTodos
     *   }
     * })
     * 
     */
    delete<T extends UserTodosDeleteArgs>(args: SelectSubset<T, UserTodosDeleteArgs<ExtArgs>>): Prisma__UserTodosClient<$Result.GetResult<Prisma.$UserTodosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserTodos.
     * @param {UserTodosUpdateArgs} args - Arguments to update one UserTodos.
     * @example
     * // Update one UserTodos
     * const userTodos = await prisma.userTodos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserTodosUpdateArgs>(args: SelectSubset<T, UserTodosUpdateArgs<ExtArgs>>): Prisma__UserTodosClient<$Result.GetResult<Prisma.$UserTodosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserTodos.
     * @param {UserTodosDeleteManyArgs} args - Arguments to filter UserTodos to delete.
     * @example
     * // Delete a few UserTodos
     * const { count } = await prisma.userTodos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserTodosDeleteManyArgs>(args?: SelectSubset<T, UserTodosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserTodos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTodosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserTodos
     * const userTodos = await prisma.userTodos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserTodosUpdateManyArgs>(args: SelectSubset<T, UserTodosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserTodos.
     * @param {UserTodosUpsertArgs} args - Arguments to update or create a UserTodos.
     * @example
     * // Update or create a UserTodos
     * const userTodos = await prisma.userTodos.upsert({
     *   create: {
     *     // ... data to create a UserTodos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserTodos we want to update
     *   }
     * })
     */
    upsert<T extends UserTodosUpsertArgs>(args: SelectSubset<T, UserTodosUpsertArgs<ExtArgs>>): Prisma__UserTodosClient<$Result.GetResult<Prisma.$UserTodosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserTodos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTodosCountArgs} args - Arguments to filter UserTodos to count.
     * @example
     * // Count the number of UserTodos
     * const count = await prisma.userTodos.count({
     *   where: {
     *     // ... the filter for the UserTodos we want to count
     *   }
     * })
    **/
    count<T extends UserTodosCountArgs>(
      args?: Subset<T, UserTodosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserTodosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserTodos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTodosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserTodosAggregateArgs>(args: Subset<T, UserTodosAggregateArgs>): Prisma.PrismaPromise<GetUserTodosAggregateType<T>>

    /**
     * Group by UserTodos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTodosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserTodosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserTodosGroupByArgs['orderBy'] }
        : { orderBy?: UserTodosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserTodosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserTodosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserTodos model
   */
  readonly fields: UserTodosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserTodos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserTodosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserTodos model
   */
  interface UserTodosFieldRefs {
    readonly id: FieldRef<"UserTodos", 'Int'>
    readonly userId: FieldRef<"UserTodos", 'String'>
    readonly contents: FieldRef<"UserTodos", 'String'>
    readonly isDone: FieldRef<"UserTodos", 'Boolean'>
    readonly createdAt: FieldRef<"UserTodos", 'DateTime'>
    readonly updatedAt: FieldRef<"UserTodos", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserTodos findUnique
   */
  export type UserTodosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTodos
     */
    select?: UserTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTodos
     */
    omit?: UserTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTodosInclude<ExtArgs> | null
    /**
     * Filter, which UserTodos to fetch.
     */
    where: UserTodosWhereUniqueInput
  }

  /**
   * UserTodos findUniqueOrThrow
   */
  export type UserTodosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTodos
     */
    select?: UserTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTodos
     */
    omit?: UserTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTodosInclude<ExtArgs> | null
    /**
     * Filter, which UserTodos to fetch.
     */
    where: UserTodosWhereUniqueInput
  }

  /**
   * UserTodos findFirst
   */
  export type UserTodosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTodos
     */
    select?: UserTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTodos
     */
    omit?: UserTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTodosInclude<ExtArgs> | null
    /**
     * Filter, which UserTodos to fetch.
     */
    where?: UserTodosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTodos to fetch.
     */
    orderBy?: UserTodosOrderByWithRelationInput | UserTodosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTodos.
     */
    cursor?: UserTodosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTodos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTodos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTodos.
     */
    distinct?: UserTodosScalarFieldEnum | UserTodosScalarFieldEnum[]
  }

  /**
   * UserTodos findFirstOrThrow
   */
  export type UserTodosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTodos
     */
    select?: UserTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTodos
     */
    omit?: UserTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTodosInclude<ExtArgs> | null
    /**
     * Filter, which UserTodos to fetch.
     */
    where?: UserTodosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTodos to fetch.
     */
    orderBy?: UserTodosOrderByWithRelationInput | UserTodosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTodos.
     */
    cursor?: UserTodosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTodos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTodos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTodos.
     */
    distinct?: UserTodosScalarFieldEnum | UserTodosScalarFieldEnum[]
  }

  /**
   * UserTodos findMany
   */
  export type UserTodosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTodos
     */
    select?: UserTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTodos
     */
    omit?: UserTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTodosInclude<ExtArgs> | null
    /**
     * Filter, which UserTodos to fetch.
     */
    where?: UserTodosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTodos to fetch.
     */
    orderBy?: UserTodosOrderByWithRelationInput | UserTodosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserTodos.
     */
    cursor?: UserTodosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTodos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTodos.
     */
    skip?: number
    distinct?: UserTodosScalarFieldEnum | UserTodosScalarFieldEnum[]
  }

  /**
   * UserTodos create
   */
  export type UserTodosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTodos
     */
    select?: UserTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTodos
     */
    omit?: UserTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTodosInclude<ExtArgs> | null
    /**
     * The data needed to create a UserTodos.
     */
    data: XOR<UserTodosCreateInput, UserTodosUncheckedCreateInput>
  }

  /**
   * UserTodos createMany
   */
  export type UserTodosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserTodos.
     */
    data: UserTodosCreateManyInput | UserTodosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserTodos update
   */
  export type UserTodosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTodos
     */
    select?: UserTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTodos
     */
    omit?: UserTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTodosInclude<ExtArgs> | null
    /**
     * The data needed to update a UserTodos.
     */
    data: XOR<UserTodosUpdateInput, UserTodosUncheckedUpdateInput>
    /**
     * Choose, which UserTodos to update.
     */
    where: UserTodosWhereUniqueInput
  }

  /**
   * UserTodos updateMany
   */
  export type UserTodosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserTodos.
     */
    data: XOR<UserTodosUpdateManyMutationInput, UserTodosUncheckedUpdateManyInput>
    /**
     * Filter which UserTodos to update
     */
    where?: UserTodosWhereInput
    /**
     * Limit how many UserTodos to update.
     */
    limit?: number
  }

  /**
   * UserTodos upsert
   */
  export type UserTodosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTodos
     */
    select?: UserTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTodos
     */
    omit?: UserTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTodosInclude<ExtArgs> | null
    /**
     * The filter to search for the UserTodos to update in case it exists.
     */
    where: UserTodosWhereUniqueInput
    /**
     * In case the UserTodos found by the `where` argument doesn't exist, create a new UserTodos with this data.
     */
    create: XOR<UserTodosCreateInput, UserTodosUncheckedCreateInput>
    /**
     * In case the UserTodos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserTodosUpdateInput, UserTodosUncheckedUpdateInput>
  }

  /**
   * UserTodos delete
   */
  export type UserTodosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTodos
     */
    select?: UserTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTodos
     */
    omit?: UserTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTodosInclude<ExtArgs> | null
    /**
     * Filter which UserTodos to delete.
     */
    where: UserTodosWhereUniqueInput
  }

  /**
   * UserTodos deleteMany
   */
  export type UserTodosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserTodos to delete
     */
    where?: UserTodosWhereInput
    /**
     * Limit how many UserTodos to delete.
     */
    limit?: number
  }

  /**
   * UserTodos without action
   */
  export type UserTodosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTodos
     */
    select?: UserTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTodos
     */
    omit?: UserTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTodosInclude<ExtArgs> | null
  }


  /**
   * Model TeamTodos
   */

  export type AggregateTeamTodos = {
    _count: TeamTodosCountAggregateOutputType | null
    _avg: TeamTodosAvgAggregateOutputType | null
    _sum: TeamTodosSumAggregateOutputType | null
    _min: TeamTodosMinAggregateOutputType | null
    _max: TeamTodosMaxAggregateOutputType | null
  }

  export type TeamTodosAvgAggregateOutputType = {
    id: number | null
    teamId: number | null
  }

  export type TeamTodosSumAggregateOutputType = {
    id: number | null
    teamId: number | null
  }

  export type TeamTodosMinAggregateOutputType = {
    id: number | null
    teamId: number | null
    contents: string | null
    isDone: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamTodosMaxAggregateOutputType = {
    id: number | null
    teamId: number | null
    contents: string | null
    isDone: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamTodosCountAggregateOutputType = {
    id: number
    teamId: number
    contents: number
    isDone: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TeamTodosAvgAggregateInputType = {
    id?: true
    teamId?: true
  }

  export type TeamTodosSumAggregateInputType = {
    id?: true
    teamId?: true
  }

  export type TeamTodosMinAggregateInputType = {
    id?: true
    teamId?: true
    contents?: true
    isDone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamTodosMaxAggregateInputType = {
    id?: true
    teamId?: true
    contents?: true
    isDone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamTodosCountAggregateInputType = {
    id?: true
    teamId?: true
    contents?: true
    isDone?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TeamTodosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamTodos to aggregate.
     */
    where?: TeamTodosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamTodos to fetch.
     */
    orderBy?: TeamTodosOrderByWithRelationInput | TeamTodosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamTodosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamTodos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamTodos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamTodos
    **/
    _count?: true | TeamTodosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamTodosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamTodosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamTodosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamTodosMaxAggregateInputType
  }

  export type GetTeamTodosAggregateType<T extends TeamTodosAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamTodos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamTodos[P]>
      : GetScalarType<T[P], AggregateTeamTodos[P]>
  }




  export type TeamTodosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamTodosWhereInput
    orderBy?: TeamTodosOrderByWithAggregationInput | TeamTodosOrderByWithAggregationInput[]
    by: TeamTodosScalarFieldEnum[] | TeamTodosScalarFieldEnum
    having?: TeamTodosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamTodosCountAggregateInputType | true
    _avg?: TeamTodosAvgAggregateInputType
    _sum?: TeamTodosSumAggregateInputType
    _min?: TeamTodosMinAggregateInputType
    _max?: TeamTodosMaxAggregateInputType
  }

  export type TeamTodosGroupByOutputType = {
    id: number
    teamId: number
    contents: string
    isDone: boolean
    createdAt: Date
    updatedAt: Date
    _count: TeamTodosCountAggregateOutputType | null
    _avg: TeamTodosAvgAggregateOutputType | null
    _sum: TeamTodosSumAggregateOutputType | null
    _min: TeamTodosMinAggregateOutputType | null
    _max: TeamTodosMaxAggregateOutputType | null
  }

  type GetTeamTodosGroupByPayload<T extends TeamTodosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamTodosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamTodosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamTodosGroupByOutputType[P]>
            : GetScalarType<T[P], TeamTodosGroupByOutputType[P]>
        }
      >
    >


  export type TeamTodosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    contents?: boolean
    isDone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team?: boolean | TeamsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamTodos"]>



  export type TeamTodosSelectScalar = {
    id?: boolean
    teamId?: boolean
    contents?: boolean
    isDone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TeamTodosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "teamId" | "contents" | "isDone" | "createdAt" | "updatedAt", ExtArgs["result"]["teamTodos"]>
  export type TeamTodosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamsDefaultArgs<ExtArgs>
  }

  export type $TeamTodosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamTodos"
    objects: {
      team: Prisma.$TeamsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      teamId: number
      contents: string
      isDone: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["teamTodos"]>
    composites: {}
  }

  type TeamTodosGetPayload<S extends boolean | null | undefined | TeamTodosDefaultArgs> = $Result.GetResult<Prisma.$TeamTodosPayload, S>

  type TeamTodosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamTodosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamTodosCountAggregateInputType | true
    }

  export interface TeamTodosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamTodos'], meta: { name: 'TeamTodos' } }
    /**
     * Find zero or one TeamTodos that matches the filter.
     * @param {TeamTodosFindUniqueArgs} args - Arguments to find a TeamTodos
     * @example
     * // Get one TeamTodos
     * const teamTodos = await prisma.teamTodos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamTodosFindUniqueArgs>(args: SelectSubset<T, TeamTodosFindUniqueArgs<ExtArgs>>): Prisma__TeamTodosClient<$Result.GetResult<Prisma.$TeamTodosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeamTodos that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamTodosFindUniqueOrThrowArgs} args - Arguments to find a TeamTodos
     * @example
     * // Get one TeamTodos
     * const teamTodos = await prisma.teamTodos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamTodosFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamTodosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamTodosClient<$Result.GetResult<Prisma.$TeamTodosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamTodos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamTodosFindFirstArgs} args - Arguments to find a TeamTodos
     * @example
     * // Get one TeamTodos
     * const teamTodos = await prisma.teamTodos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamTodosFindFirstArgs>(args?: SelectSubset<T, TeamTodosFindFirstArgs<ExtArgs>>): Prisma__TeamTodosClient<$Result.GetResult<Prisma.$TeamTodosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamTodos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamTodosFindFirstOrThrowArgs} args - Arguments to find a TeamTodos
     * @example
     * // Get one TeamTodos
     * const teamTodos = await prisma.teamTodos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamTodosFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamTodosFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamTodosClient<$Result.GetResult<Prisma.$TeamTodosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeamTodos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamTodosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamTodos
     * const teamTodos = await prisma.teamTodos.findMany()
     * 
     * // Get first 10 TeamTodos
     * const teamTodos = await prisma.teamTodos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamTodosWithIdOnly = await prisma.teamTodos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamTodosFindManyArgs>(args?: SelectSubset<T, TeamTodosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamTodosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeamTodos.
     * @param {TeamTodosCreateArgs} args - Arguments to create a TeamTodos.
     * @example
     * // Create one TeamTodos
     * const TeamTodos = await prisma.teamTodos.create({
     *   data: {
     *     // ... data to create a TeamTodos
     *   }
     * })
     * 
     */
    create<T extends TeamTodosCreateArgs>(args: SelectSubset<T, TeamTodosCreateArgs<ExtArgs>>): Prisma__TeamTodosClient<$Result.GetResult<Prisma.$TeamTodosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeamTodos.
     * @param {TeamTodosCreateManyArgs} args - Arguments to create many TeamTodos.
     * @example
     * // Create many TeamTodos
     * const teamTodos = await prisma.teamTodos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamTodosCreateManyArgs>(args?: SelectSubset<T, TeamTodosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TeamTodos.
     * @param {TeamTodosDeleteArgs} args - Arguments to delete one TeamTodos.
     * @example
     * // Delete one TeamTodos
     * const TeamTodos = await prisma.teamTodos.delete({
     *   where: {
     *     // ... filter to delete one TeamTodos
     *   }
     * })
     * 
     */
    delete<T extends TeamTodosDeleteArgs>(args: SelectSubset<T, TeamTodosDeleteArgs<ExtArgs>>): Prisma__TeamTodosClient<$Result.GetResult<Prisma.$TeamTodosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeamTodos.
     * @param {TeamTodosUpdateArgs} args - Arguments to update one TeamTodos.
     * @example
     * // Update one TeamTodos
     * const teamTodos = await prisma.teamTodos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamTodosUpdateArgs>(args: SelectSubset<T, TeamTodosUpdateArgs<ExtArgs>>): Prisma__TeamTodosClient<$Result.GetResult<Prisma.$TeamTodosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeamTodos.
     * @param {TeamTodosDeleteManyArgs} args - Arguments to filter TeamTodos to delete.
     * @example
     * // Delete a few TeamTodos
     * const { count } = await prisma.teamTodos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamTodosDeleteManyArgs>(args?: SelectSubset<T, TeamTodosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamTodos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamTodosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamTodos
     * const teamTodos = await prisma.teamTodos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamTodosUpdateManyArgs>(args: SelectSubset<T, TeamTodosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TeamTodos.
     * @param {TeamTodosUpsertArgs} args - Arguments to update or create a TeamTodos.
     * @example
     * // Update or create a TeamTodos
     * const teamTodos = await prisma.teamTodos.upsert({
     *   create: {
     *     // ... data to create a TeamTodos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamTodos we want to update
     *   }
     * })
     */
    upsert<T extends TeamTodosUpsertArgs>(args: SelectSubset<T, TeamTodosUpsertArgs<ExtArgs>>): Prisma__TeamTodosClient<$Result.GetResult<Prisma.$TeamTodosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeamTodos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamTodosCountArgs} args - Arguments to filter TeamTodos to count.
     * @example
     * // Count the number of TeamTodos
     * const count = await prisma.teamTodos.count({
     *   where: {
     *     // ... the filter for the TeamTodos we want to count
     *   }
     * })
    **/
    count<T extends TeamTodosCountArgs>(
      args?: Subset<T, TeamTodosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamTodosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamTodos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamTodosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamTodosAggregateArgs>(args: Subset<T, TeamTodosAggregateArgs>): Prisma.PrismaPromise<GetTeamTodosAggregateType<T>>

    /**
     * Group by TeamTodos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamTodosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamTodosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamTodosGroupByArgs['orderBy'] }
        : { orderBy?: TeamTodosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamTodosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamTodosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamTodos model
   */
  readonly fields: TeamTodosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamTodos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamTodosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamsDefaultArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamTodos model
   */
  interface TeamTodosFieldRefs {
    readonly id: FieldRef<"TeamTodos", 'Int'>
    readonly teamId: FieldRef<"TeamTodos", 'Int'>
    readonly contents: FieldRef<"TeamTodos", 'String'>
    readonly isDone: FieldRef<"TeamTodos", 'Boolean'>
    readonly createdAt: FieldRef<"TeamTodos", 'DateTime'>
    readonly updatedAt: FieldRef<"TeamTodos", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TeamTodos findUnique
   */
  export type TeamTodosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamTodos
     */
    select?: TeamTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamTodos
     */
    omit?: TeamTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamTodosInclude<ExtArgs> | null
    /**
     * Filter, which TeamTodos to fetch.
     */
    where: TeamTodosWhereUniqueInput
  }

  /**
   * TeamTodos findUniqueOrThrow
   */
  export type TeamTodosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamTodos
     */
    select?: TeamTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamTodos
     */
    omit?: TeamTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamTodosInclude<ExtArgs> | null
    /**
     * Filter, which TeamTodos to fetch.
     */
    where: TeamTodosWhereUniqueInput
  }

  /**
   * TeamTodos findFirst
   */
  export type TeamTodosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamTodos
     */
    select?: TeamTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamTodos
     */
    omit?: TeamTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamTodosInclude<ExtArgs> | null
    /**
     * Filter, which TeamTodos to fetch.
     */
    where?: TeamTodosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamTodos to fetch.
     */
    orderBy?: TeamTodosOrderByWithRelationInput | TeamTodosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamTodos.
     */
    cursor?: TeamTodosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamTodos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamTodos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamTodos.
     */
    distinct?: TeamTodosScalarFieldEnum | TeamTodosScalarFieldEnum[]
  }

  /**
   * TeamTodos findFirstOrThrow
   */
  export type TeamTodosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamTodos
     */
    select?: TeamTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamTodos
     */
    omit?: TeamTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamTodosInclude<ExtArgs> | null
    /**
     * Filter, which TeamTodos to fetch.
     */
    where?: TeamTodosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamTodos to fetch.
     */
    orderBy?: TeamTodosOrderByWithRelationInput | TeamTodosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamTodos.
     */
    cursor?: TeamTodosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamTodos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamTodos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamTodos.
     */
    distinct?: TeamTodosScalarFieldEnum | TeamTodosScalarFieldEnum[]
  }

  /**
   * TeamTodos findMany
   */
  export type TeamTodosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamTodos
     */
    select?: TeamTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamTodos
     */
    omit?: TeamTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamTodosInclude<ExtArgs> | null
    /**
     * Filter, which TeamTodos to fetch.
     */
    where?: TeamTodosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamTodos to fetch.
     */
    orderBy?: TeamTodosOrderByWithRelationInput | TeamTodosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamTodos.
     */
    cursor?: TeamTodosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamTodos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamTodos.
     */
    skip?: number
    distinct?: TeamTodosScalarFieldEnum | TeamTodosScalarFieldEnum[]
  }

  /**
   * TeamTodos create
   */
  export type TeamTodosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamTodos
     */
    select?: TeamTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamTodos
     */
    omit?: TeamTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamTodosInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamTodos.
     */
    data: XOR<TeamTodosCreateInput, TeamTodosUncheckedCreateInput>
  }

  /**
   * TeamTodos createMany
   */
  export type TeamTodosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamTodos.
     */
    data: TeamTodosCreateManyInput | TeamTodosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeamTodos update
   */
  export type TeamTodosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamTodos
     */
    select?: TeamTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamTodos
     */
    omit?: TeamTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamTodosInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamTodos.
     */
    data: XOR<TeamTodosUpdateInput, TeamTodosUncheckedUpdateInput>
    /**
     * Choose, which TeamTodos to update.
     */
    where: TeamTodosWhereUniqueInput
  }

  /**
   * TeamTodos updateMany
   */
  export type TeamTodosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamTodos.
     */
    data: XOR<TeamTodosUpdateManyMutationInput, TeamTodosUncheckedUpdateManyInput>
    /**
     * Filter which TeamTodos to update
     */
    where?: TeamTodosWhereInput
    /**
     * Limit how many TeamTodos to update.
     */
    limit?: number
  }

  /**
   * TeamTodos upsert
   */
  export type TeamTodosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamTodos
     */
    select?: TeamTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamTodos
     */
    omit?: TeamTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamTodosInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamTodos to update in case it exists.
     */
    where: TeamTodosWhereUniqueInput
    /**
     * In case the TeamTodos found by the `where` argument doesn't exist, create a new TeamTodos with this data.
     */
    create: XOR<TeamTodosCreateInput, TeamTodosUncheckedCreateInput>
    /**
     * In case the TeamTodos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamTodosUpdateInput, TeamTodosUncheckedUpdateInput>
  }

  /**
   * TeamTodos delete
   */
  export type TeamTodosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamTodos
     */
    select?: TeamTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamTodos
     */
    omit?: TeamTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamTodosInclude<ExtArgs> | null
    /**
     * Filter which TeamTodos to delete.
     */
    where: TeamTodosWhereUniqueInput
  }

  /**
   * TeamTodos deleteMany
   */
  export type TeamTodosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamTodos to delete
     */
    where?: TeamTodosWhereInput
    /**
     * Limit how many TeamTodos to delete.
     */
    limit?: number
  }

  /**
   * TeamTodos without action
   */
  export type TeamTodosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamTodos
     */
    select?: TeamTodosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamTodos
     */
    omit?: TeamTodosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamTodosInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    password: 'password',
    createdAt: 'createdAt'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const TeamsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    adminId: 'adminId'
  };

  export type TeamsScalarFieldEnum = (typeof TeamsScalarFieldEnum)[keyof typeof TeamsScalarFieldEnum]


  export const TeamMembersScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    teamId: 'teamId'
  };

  export type TeamMembersScalarFieldEnum = (typeof TeamMembersScalarFieldEnum)[keyof typeof TeamMembersScalarFieldEnum]


  export const UserTodosScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    contents: 'contents',
    isDone: 'isDone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserTodosScalarFieldEnum = (typeof UserTodosScalarFieldEnum)[keyof typeof UserTodosScalarFieldEnum]


  export const TeamTodosScalarFieldEnum: {
    id: 'id',
    teamId: 'teamId',
    contents: 'contents',
    isDone: 'isDone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TeamTodosScalarFieldEnum = (typeof TeamTodosScalarFieldEnum)[keyof typeof TeamTodosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const UsersOrderByRelevanceFieldEnum: {
    id: 'id',
    password: 'password'
  };

  export type UsersOrderByRelevanceFieldEnum = (typeof UsersOrderByRelevanceFieldEnum)[keyof typeof UsersOrderByRelevanceFieldEnum]


  export const TeamsOrderByRelevanceFieldEnum: {
    name: 'name',
    adminId: 'adminId'
  };

  export type TeamsOrderByRelevanceFieldEnum = (typeof TeamsOrderByRelevanceFieldEnum)[keyof typeof TeamsOrderByRelevanceFieldEnum]


  export const TeamMembersOrderByRelevanceFieldEnum: {
    userId: 'userId'
  };

  export type TeamMembersOrderByRelevanceFieldEnum = (typeof TeamMembersOrderByRelevanceFieldEnum)[keyof typeof TeamMembersOrderByRelevanceFieldEnum]


  export const UserTodosOrderByRelevanceFieldEnum: {
    userId: 'userId',
    contents: 'contents'
  };

  export type UserTodosOrderByRelevanceFieldEnum = (typeof UserTodosOrderByRelevanceFieldEnum)[keyof typeof UserTodosOrderByRelevanceFieldEnum]


  export const TeamTodosOrderByRelevanceFieldEnum: {
    contents: 'contents'
  };

  export type TeamTodosOrderByRelevanceFieldEnum = (typeof TeamTodosOrderByRelevanceFieldEnum)[keyof typeof TeamTodosOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    createdAt?: DateTimeFilter<"Users"> | Date | string
    userTodos?: UserTodosListRelationFilter
    teams?: TeamsListRelationFilter
    memberships?: TeamMembersListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    userTodos?: UserTodosOrderByRelationAggregateInput
    teams?: TeamsOrderByRelationAggregateInput
    memberships?: TeamMembersOrderByRelationAggregateInput
    _relevance?: UsersOrderByRelevanceInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    password?: StringFilter<"Users"> | string
    createdAt?: DateTimeFilter<"Users"> | Date | string
    userTodos?: UserTodosListRelationFilter
    teams?: TeamsListRelationFilter
    memberships?: TeamMembersListRelationFilter
  }, "id">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
  }

  export type TeamsWhereInput = {
    AND?: TeamsWhereInput | TeamsWhereInput[]
    OR?: TeamsWhereInput[]
    NOT?: TeamsWhereInput | TeamsWhereInput[]
    id?: IntFilter<"Teams"> | number
    name?: StringFilter<"Teams"> | string
    adminId?: StringFilter<"Teams"> | string
    admin?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    members?: TeamMembersListRelationFilter
    teamTodos?: TeamTodosListRelationFilter
  }

  export type TeamsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    adminId?: SortOrder
    admin?: UsersOrderByWithRelationInput
    members?: TeamMembersOrderByRelationAggregateInput
    teamTodos?: TeamTodosOrderByRelationAggregateInput
    _relevance?: TeamsOrderByRelevanceInput
  }

  export type TeamsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TeamsWhereInput | TeamsWhereInput[]
    OR?: TeamsWhereInput[]
    NOT?: TeamsWhereInput | TeamsWhereInput[]
    name?: StringFilter<"Teams"> | string
    adminId?: StringFilter<"Teams"> | string
    admin?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    members?: TeamMembersListRelationFilter
    teamTodos?: TeamTodosListRelationFilter
  }, "id">

  export type TeamsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    adminId?: SortOrder
    _count?: TeamsCountOrderByAggregateInput
    _avg?: TeamsAvgOrderByAggregateInput
    _max?: TeamsMaxOrderByAggregateInput
    _min?: TeamsMinOrderByAggregateInput
    _sum?: TeamsSumOrderByAggregateInput
  }

  export type TeamsScalarWhereWithAggregatesInput = {
    AND?: TeamsScalarWhereWithAggregatesInput | TeamsScalarWhereWithAggregatesInput[]
    OR?: TeamsScalarWhereWithAggregatesInput[]
    NOT?: TeamsScalarWhereWithAggregatesInput | TeamsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Teams"> | number
    name?: StringWithAggregatesFilter<"Teams"> | string
    adminId?: StringWithAggregatesFilter<"Teams"> | string
  }

  export type TeamMembersWhereInput = {
    AND?: TeamMembersWhereInput | TeamMembersWhereInput[]
    OR?: TeamMembersWhereInput[]
    NOT?: TeamMembersWhereInput | TeamMembersWhereInput[]
    id?: IntFilter<"TeamMembers"> | number
    userId?: StringFilter<"TeamMembers"> | string
    teamId?: IntFilter<"TeamMembers"> | number
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    team?: XOR<TeamsScalarRelationFilter, TeamsWhereInput>
  }

  export type TeamMembersOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
    user?: UsersOrderByWithRelationInput
    team?: TeamsOrderByWithRelationInput
    _relevance?: TeamMembersOrderByRelevanceInput
  }

  export type TeamMembersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_teamId?: TeamMembersUserIdTeamIdCompoundUniqueInput
    AND?: TeamMembersWhereInput | TeamMembersWhereInput[]
    OR?: TeamMembersWhereInput[]
    NOT?: TeamMembersWhereInput | TeamMembersWhereInput[]
    userId?: StringFilter<"TeamMembers"> | string
    teamId?: IntFilter<"TeamMembers"> | number
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    team?: XOR<TeamsScalarRelationFilter, TeamsWhereInput>
  }, "id" | "userId_teamId">

  export type TeamMembersOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
    _count?: TeamMembersCountOrderByAggregateInput
    _avg?: TeamMembersAvgOrderByAggregateInput
    _max?: TeamMembersMaxOrderByAggregateInput
    _min?: TeamMembersMinOrderByAggregateInput
    _sum?: TeamMembersSumOrderByAggregateInput
  }

  export type TeamMembersScalarWhereWithAggregatesInput = {
    AND?: TeamMembersScalarWhereWithAggregatesInput | TeamMembersScalarWhereWithAggregatesInput[]
    OR?: TeamMembersScalarWhereWithAggregatesInput[]
    NOT?: TeamMembersScalarWhereWithAggregatesInput | TeamMembersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TeamMembers"> | number
    userId?: StringWithAggregatesFilter<"TeamMembers"> | string
    teamId?: IntWithAggregatesFilter<"TeamMembers"> | number
  }

  export type UserTodosWhereInput = {
    AND?: UserTodosWhereInput | UserTodosWhereInput[]
    OR?: UserTodosWhereInput[]
    NOT?: UserTodosWhereInput | UserTodosWhereInput[]
    id?: IntFilter<"UserTodos"> | number
    userId?: StringFilter<"UserTodos"> | string
    contents?: StringFilter<"UserTodos"> | string
    isDone?: BoolFilter<"UserTodos"> | boolean
    createdAt?: DateTimeFilter<"UserTodos"> | Date | string
    updatedAt?: DateTimeFilter<"UserTodos"> | Date | string
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }

  export type UserTodosOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    contents?: SortOrder
    isDone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UsersOrderByWithRelationInput
    _relevance?: UserTodosOrderByRelevanceInput
  }

  export type UserTodosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserTodosWhereInput | UserTodosWhereInput[]
    OR?: UserTodosWhereInput[]
    NOT?: UserTodosWhereInput | UserTodosWhereInput[]
    userId?: StringFilter<"UserTodos"> | string
    contents?: StringFilter<"UserTodos"> | string
    isDone?: BoolFilter<"UserTodos"> | boolean
    createdAt?: DateTimeFilter<"UserTodos"> | Date | string
    updatedAt?: DateTimeFilter<"UserTodos"> | Date | string
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }, "id">

  export type UserTodosOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    contents?: SortOrder
    isDone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserTodosCountOrderByAggregateInput
    _avg?: UserTodosAvgOrderByAggregateInput
    _max?: UserTodosMaxOrderByAggregateInput
    _min?: UserTodosMinOrderByAggregateInput
    _sum?: UserTodosSumOrderByAggregateInput
  }

  export type UserTodosScalarWhereWithAggregatesInput = {
    AND?: UserTodosScalarWhereWithAggregatesInput | UserTodosScalarWhereWithAggregatesInput[]
    OR?: UserTodosScalarWhereWithAggregatesInput[]
    NOT?: UserTodosScalarWhereWithAggregatesInput | UserTodosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserTodos"> | number
    userId?: StringWithAggregatesFilter<"UserTodos"> | string
    contents?: StringWithAggregatesFilter<"UserTodos"> | string
    isDone?: BoolWithAggregatesFilter<"UserTodos"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserTodos"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserTodos"> | Date | string
  }

  export type TeamTodosWhereInput = {
    AND?: TeamTodosWhereInput | TeamTodosWhereInput[]
    OR?: TeamTodosWhereInput[]
    NOT?: TeamTodosWhereInput | TeamTodosWhereInput[]
    id?: IntFilter<"TeamTodos"> | number
    teamId?: IntFilter<"TeamTodos"> | number
    contents?: StringFilter<"TeamTodos"> | string
    isDone?: BoolFilter<"TeamTodos"> | boolean
    createdAt?: DateTimeFilter<"TeamTodos"> | Date | string
    updatedAt?: DateTimeFilter<"TeamTodos"> | Date | string
    team?: XOR<TeamsScalarRelationFilter, TeamsWhereInput>
  }

  export type TeamTodosOrderByWithRelationInput = {
    id?: SortOrder
    teamId?: SortOrder
    contents?: SortOrder
    isDone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    team?: TeamsOrderByWithRelationInput
    _relevance?: TeamTodosOrderByRelevanceInput
  }

  export type TeamTodosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TeamTodosWhereInput | TeamTodosWhereInput[]
    OR?: TeamTodosWhereInput[]
    NOT?: TeamTodosWhereInput | TeamTodosWhereInput[]
    teamId?: IntFilter<"TeamTodos"> | number
    contents?: StringFilter<"TeamTodos"> | string
    isDone?: BoolFilter<"TeamTodos"> | boolean
    createdAt?: DateTimeFilter<"TeamTodos"> | Date | string
    updatedAt?: DateTimeFilter<"TeamTodos"> | Date | string
    team?: XOR<TeamsScalarRelationFilter, TeamsWhereInput>
  }, "id">

  export type TeamTodosOrderByWithAggregationInput = {
    id?: SortOrder
    teamId?: SortOrder
    contents?: SortOrder
    isDone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TeamTodosCountOrderByAggregateInput
    _avg?: TeamTodosAvgOrderByAggregateInput
    _max?: TeamTodosMaxOrderByAggregateInput
    _min?: TeamTodosMinOrderByAggregateInput
    _sum?: TeamTodosSumOrderByAggregateInput
  }

  export type TeamTodosScalarWhereWithAggregatesInput = {
    AND?: TeamTodosScalarWhereWithAggregatesInput | TeamTodosScalarWhereWithAggregatesInput[]
    OR?: TeamTodosScalarWhereWithAggregatesInput[]
    NOT?: TeamTodosScalarWhereWithAggregatesInput | TeamTodosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TeamTodos"> | number
    teamId?: IntWithAggregatesFilter<"TeamTodos"> | number
    contents?: StringWithAggregatesFilter<"TeamTodos"> | string
    isDone?: BoolWithAggregatesFilter<"TeamTodos"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"TeamTodos"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TeamTodos"> | Date | string
  }

  export type UsersCreateInput = {
    id: string
    password: string
    createdAt?: Date | string
    userTodos?: UserTodosCreateNestedManyWithoutUserInput
    teams?: TeamsCreateNestedManyWithoutAdminInput
    memberships?: TeamMembersCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateInput = {
    id: string
    password: string
    createdAt?: Date | string
    userTodos?: UserTodosUncheckedCreateNestedManyWithoutUserInput
    teams?: TeamsUncheckedCreateNestedManyWithoutAdminInput
    memberships?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userTodos?: UserTodosUpdateManyWithoutUserNestedInput
    teams?: TeamsUpdateManyWithoutAdminNestedInput
    memberships?: TeamMembersUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userTodos?: UserTodosUncheckedUpdateManyWithoutUserNestedInput
    teams?: TeamsUncheckedUpdateManyWithoutAdminNestedInput
    memberships?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateManyInput = {
    id: string
    password: string
    createdAt?: Date | string
  }

  export type UsersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamsCreateInput = {
    name: string
    admin: UsersCreateNestedOneWithoutTeamsInput
    members?: TeamMembersCreateNestedManyWithoutTeamInput
    teamTodos?: TeamTodosCreateNestedManyWithoutTeamInput
  }

  export type TeamsUncheckedCreateInput = {
    id?: number
    name: string
    adminId: string
    members?: TeamMembersUncheckedCreateNestedManyWithoutTeamInput
    teamTodos?: TeamTodosUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    admin?: UsersUpdateOneRequiredWithoutTeamsNestedInput
    members?: TeamMembersUpdateManyWithoutTeamNestedInput
    teamTodos?: TeamTodosUpdateManyWithoutTeamNestedInput
  }

  export type TeamsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    members?: TeamMembersUncheckedUpdateManyWithoutTeamNestedInput
    teamTodos?: TeamTodosUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamsCreateManyInput = {
    id?: number
    name: string
    adminId: string
  }

  export type TeamsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TeamsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
  }

  export type TeamMembersCreateInput = {
    user: UsersCreateNestedOneWithoutMembershipsInput
    team: TeamsCreateNestedOneWithoutMembersInput
  }

  export type TeamMembersUncheckedCreateInput = {
    id?: number
    userId: string
    teamId: number
  }

  export type TeamMembersUpdateInput = {
    user?: UsersUpdateOneRequiredWithoutMembershipsNestedInput
    team?: TeamsUpdateOneRequiredWithoutMembersNestedInput
  }

  export type TeamMembersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type TeamMembersCreateManyInput = {
    id?: number
    userId: string
    teamId: number
  }

  export type TeamMembersUpdateManyMutationInput = {

  }

  export type TeamMembersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type UserTodosCreateInput = {
    contents: string
    isDone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UsersCreateNestedOneWithoutUserTodosInput
  }

  export type UserTodosUncheckedCreateInput = {
    id?: number
    userId: string
    contents: string
    isDone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTodosUpdateInput = {
    contents?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutUserTodosNestedInput
  }

  export type UserTodosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    contents?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTodosCreateManyInput = {
    id?: number
    userId: string
    contents: string
    isDone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTodosUpdateManyMutationInput = {
    contents?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTodosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    contents?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamTodosCreateInput = {
    contents: string
    isDone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamsCreateNestedOneWithoutTeamTodosInput
  }

  export type TeamTodosUncheckedCreateInput = {
    id?: number
    teamId: number
    contents: string
    isDone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamTodosUpdateInput = {
    contents?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamsUpdateOneRequiredWithoutTeamTodosNestedInput
  }

  export type TeamTodosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    contents?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamTodosCreateManyInput = {
    id?: number
    teamId: number
    contents: string
    isDone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamTodosUpdateManyMutationInput = {
    contents?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamTodosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    contents?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserTodosListRelationFilter = {
    every?: UserTodosWhereInput
    some?: UserTodosWhereInput
    none?: UserTodosWhereInput
  }

  export type TeamsListRelationFilter = {
    every?: TeamsWhereInput
    some?: TeamsWhereInput
    none?: TeamsWhereInput
  }

  export type TeamMembersListRelationFilter = {
    every?: TeamMembersWhereInput
    some?: TeamMembersWhereInput
    none?: TeamMembersWhereInput
  }

  export type UserTodosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamMembersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersOrderByRelevanceInput = {
    fields: UsersOrderByRelevanceFieldEnum | UsersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UsersScalarRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type TeamTodosListRelationFilter = {
    every?: TeamTodosWhereInput
    some?: TeamTodosWhereInput
    none?: TeamTodosWhereInput
  }

  export type TeamTodosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamsOrderByRelevanceInput = {
    fields: TeamsOrderByRelevanceFieldEnum | TeamsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TeamsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    adminId?: SortOrder
  }

  export type TeamsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TeamsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    adminId?: SortOrder
  }

  export type TeamsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    adminId?: SortOrder
  }

  export type TeamsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type TeamsScalarRelationFilter = {
    is?: TeamsWhereInput
    isNot?: TeamsWhereInput
  }

  export type TeamMembersOrderByRelevanceInput = {
    fields: TeamMembersOrderByRelevanceFieldEnum | TeamMembersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TeamMembersUserIdTeamIdCompoundUniqueInput = {
    userId: string
    teamId: number
  }

  export type TeamMembersCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
  }

  export type TeamMembersAvgOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
  }

  export type TeamMembersMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
  }

  export type TeamMembersMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
  }

  export type TeamMembersSumOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserTodosOrderByRelevanceInput = {
    fields: UserTodosOrderByRelevanceFieldEnum | UserTodosOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserTodosCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    contents?: SortOrder
    isDone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTodosAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserTodosMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    contents?: SortOrder
    isDone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTodosMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    contents?: SortOrder
    isDone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTodosSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type TeamTodosOrderByRelevanceInput = {
    fields: TeamTodosOrderByRelevanceFieldEnum | TeamTodosOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TeamTodosCountOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    contents?: SortOrder
    isDone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamTodosAvgOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
  }

  export type TeamTodosMaxOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    contents?: SortOrder
    isDone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamTodosMinOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    contents?: SortOrder
    isDone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamTodosSumOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
  }

  export type UserTodosCreateNestedManyWithoutUserInput = {
    create?: XOR<UserTodosCreateWithoutUserInput, UserTodosUncheckedCreateWithoutUserInput> | UserTodosCreateWithoutUserInput[] | UserTodosUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTodosCreateOrConnectWithoutUserInput | UserTodosCreateOrConnectWithoutUserInput[]
    createMany?: UserTodosCreateManyUserInputEnvelope
    connect?: UserTodosWhereUniqueInput | UserTodosWhereUniqueInput[]
  }

  export type TeamsCreateNestedManyWithoutAdminInput = {
    create?: XOR<TeamsCreateWithoutAdminInput, TeamsUncheckedCreateWithoutAdminInput> | TeamsCreateWithoutAdminInput[] | TeamsUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: TeamsCreateOrConnectWithoutAdminInput | TeamsCreateOrConnectWithoutAdminInput[]
    createMany?: TeamsCreateManyAdminInputEnvelope
    connect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
  }

  export type TeamMembersCreateNestedManyWithoutUserInput = {
    create?: XOR<TeamMembersCreateWithoutUserInput, TeamMembersUncheckedCreateWithoutUserInput> | TeamMembersCreateWithoutUserInput[] | TeamMembersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMembersCreateOrConnectWithoutUserInput | TeamMembersCreateOrConnectWithoutUserInput[]
    createMany?: TeamMembersCreateManyUserInputEnvelope
    connect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
  }

  export type UserTodosUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserTodosCreateWithoutUserInput, UserTodosUncheckedCreateWithoutUserInput> | UserTodosCreateWithoutUserInput[] | UserTodosUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTodosCreateOrConnectWithoutUserInput | UserTodosCreateOrConnectWithoutUserInput[]
    createMany?: UserTodosCreateManyUserInputEnvelope
    connect?: UserTodosWhereUniqueInput | UserTodosWhereUniqueInput[]
  }

  export type TeamsUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<TeamsCreateWithoutAdminInput, TeamsUncheckedCreateWithoutAdminInput> | TeamsCreateWithoutAdminInput[] | TeamsUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: TeamsCreateOrConnectWithoutAdminInput | TeamsCreateOrConnectWithoutAdminInput[]
    createMany?: TeamsCreateManyAdminInputEnvelope
    connect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
  }

  export type TeamMembersUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TeamMembersCreateWithoutUserInput, TeamMembersUncheckedCreateWithoutUserInput> | TeamMembersCreateWithoutUserInput[] | TeamMembersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMembersCreateOrConnectWithoutUserInput | TeamMembersCreateOrConnectWithoutUserInput[]
    createMany?: TeamMembersCreateManyUserInputEnvelope
    connect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserTodosUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserTodosCreateWithoutUserInput, UserTodosUncheckedCreateWithoutUserInput> | UserTodosCreateWithoutUserInput[] | UserTodosUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTodosCreateOrConnectWithoutUserInput | UserTodosCreateOrConnectWithoutUserInput[]
    upsert?: UserTodosUpsertWithWhereUniqueWithoutUserInput | UserTodosUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserTodosCreateManyUserInputEnvelope
    set?: UserTodosWhereUniqueInput | UserTodosWhereUniqueInput[]
    disconnect?: UserTodosWhereUniqueInput | UserTodosWhereUniqueInput[]
    delete?: UserTodosWhereUniqueInput | UserTodosWhereUniqueInput[]
    connect?: UserTodosWhereUniqueInput | UserTodosWhereUniqueInput[]
    update?: UserTodosUpdateWithWhereUniqueWithoutUserInput | UserTodosUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserTodosUpdateManyWithWhereWithoutUserInput | UserTodosUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserTodosScalarWhereInput | UserTodosScalarWhereInput[]
  }

  export type TeamsUpdateManyWithoutAdminNestedInput = {
    create?: XOR<TeamsCreateWithoutAdminInput, TeamsUncheckedCreateWithoutAdminInput> | TeamsCreateWithoutAdminInput[] | TeamsUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: TeamsCreateOrConnectWithoutAdminInput | TeamsCreateOrConnectWithoutAdminInput[]
    upsert?: TeamsUpsertWithWhereUniqueWithoutAdminInput | TeamsUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: TeamsCreateManyAdminInputEnvelope
    set?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    disconnect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    delete?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    connect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    update?: TeamsUpdateWithWhereUniqueWithoutAdminInput | TeamsUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: TeamsUpdateManyWithWhereWithoutAdminInput | TeamsUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: TeamsScalarWhereInput | TeamsScalarWhereInput[]
  }

  export type TeamMembersUpdateManyWithoutUserNestedInput = {
    create?: XOR<TeamMembersCreateWithoutUserInput, TeamMembersUncheckedCreateWithoutUserInput> | TeamMembersCreateWithoutUserInput[] | TeamMembersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMembersCreateOrConnectWithoutUserInput | TeamMembersCreateOrConnectWithoutUserInput[]
    upsert?: TeamMembersUpsertWithWhereUniqueWithoutUserInput | TeamMembersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TeamMembersCreateManyUserInputEnvelope
    set?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    disconnect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    delete?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    connect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    update?: TeamMembersUpdateWithWhereUniqueWithoutUserInput | TeamMembersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TeamMembersUpdateManyWithWhereWithoutUserInput | TeamMembersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TeamMembersScalarWhereInput | TeamMembersScalarWhereInput[]
  }

  export type UserTodosUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserTodosCreateWithoutUserInput, UserTodosUncheckedCreateWithoutUserInput> | UserTodosCreateWithoutUserInput[] | UserTodosUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTodosCreateOrConnectWithoutUserInput | UserTodosCreateOrConnectWithoutUserInput[]
    upsert?: UserTodosUpsertWithWhereUniqueWithoutUserInput | UserTodosUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserTodosCreateManyUserInputEnvelope
    set?: UserTodosWhereUniqueInput | UserTodosWhereUniqueInput[]
    disconnect?: UserTodosWhereUniqueInput | UserTodosWhereUniqueInput[]
    delete?: UserTodosWhereUniqueInput | UserTodosWhereUniqueInput[]
    connect?: UserTodosWhereUniqueInput | UserTodosWhereUniqueInput[]
    update?: UserTodosUpdateWithWhereUniqueWithoutUserInput | UserTodosUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserTodosUpdateManyWithWhereWithoutUserInput | UserTodosUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserTodosScalarWhereInput | UserTodosScalarWhereInput[]
  }

  export type TeamsUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<TeamsCreateWithoutAdminInput, TeamsUncheckedCreateWithoutAdminInput> | TeamsCreateWithoutAdminInput[] | TeamsUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: TeamsCreateOrConnectWithoutAdminInput | TeamsCreateOrConnectWithoutAdminInput[]
    upsert?: TeamsUpsertWithWhereUniqueWithoutAdminInput | TeamsUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: TeamsCreateManyAdminInputEnvelope
    set?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    disconnect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    delete?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    connect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    update?: TeamsUpdateWithWhereUniqueWithoutAdminInput | TeamsUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: TeamsUpdateManyWithWhereWithoutAdminInput | TeamsUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: TeamsScalarWhereInput | TeamsScalarWhereInput[]
  }

  export type TeamMembersUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TeamMembersCreateWithoutUserInput, TeamMembersUncheckedCreateWithoutUserInput> | TeamMembersCreateWithoutUserInput[] | TeamMembersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMembersCreateOrConnectWithoutUserInput | TeamMembersCreateOrConnectWithoutUserInput[]
    upsert?: TeamMembersUpsertWithWhereUniqueWithoutUserInput | TeamMembersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TeamMembersCreateManyUserInputEnvelope
    set?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    disconnect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    delete?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    connect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    update?: TeamMembersUpdateWithWhereUniqueWithoutUserInput | TeamMembersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TeamMembersUpdateManyWithWhereWithoutUserInput | TeamMembersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TeamMembersScalarWhereInput | TeamMembersScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutTeamsInput = {
    create?: XOR<UsersCreateWithoutTeamsInput, UsersUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutTeamsInput
    connect?: UsersWhereUniqueInput
  }

  export type TeamMembersCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamMembersCreateWithoutTeamInput, TeamMembersUncheckedCreateWithoutTeamInput> | TeamMembersCreateWithoutTeamInput[] | TeamMembersUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMembersCreateOrConnectWithoutTeamInput | TeamMembersCreateOrConnectWithoutTeamInput[]
    createMany?: TeamMembersCreateManyTeamInputEnvelope
    connect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
  }

  export type TeamTodosCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamTodosCreateWithoutTeamInput, TeamTodosUncheckedCreateWithoutTeamInput> | TeamTodosCreateWithoutTeamInput[] | TeamTodosUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamTodosCreateOrConnectWithoutTeamInput | TeamTodosCreateOrConnectWithoutTeamInput[]
    createMany?: TeamTodosCreateManyTeamInputEnvelope
    connect?: TeamTodosWhereUniqueInput | TeamTodosWhereUniqueInput[]
  }

  export type TeamMembersUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamMembersCreateWithoutTeamInput, TeamMembersUncheckedCreateWithoutTeamInput> | TeamMembersCreateWithoutTeamInput[] | TeamMembersUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMembersCreateOrConnectWithoutTeamInput | TeamMembersCreateOrConnectWithoutTeamInput[]
    createMany?: TeamMembersCreateManyTeamInputEnvelope
    connect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
  }

  export type TeamTodosUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamTodosCreateWithoutTeamInput, TeamTodosUncheckedCreateWithoutTeamInput> | TeamTodosCreateWithoutTeamInput[] | TeamTodosUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamTodosCreateOrConnectWithoutTeamInput | TeamTodosCreateOrConnectWithoutTeamInput[]
    createMany?: TeamTodosCreateManyTeamInputEnvelope
    connect?: TeamTodosWhereUniqueInput | TeamTodosWhereUniqueInput[]
  }

  export type UsersUpdateOneRequiredWithoutTeamsNestedInput = {
    create?: XOR<UsersCreateWithoutTeamsInput, UsersUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutTeamsInput
    upsert?: UsersUpsertWithoutTeamsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutTeamsInput, UsersUpdateWithoutTeamsInput>, UsersUncheckedUpdateWithoutTeamsInput>
  }

  export type TeamMembersUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamMembersCreateWithoutTeamInput, TeamMembersUncheckedCreateWithoutTeamInput> | TeamMembersCreateWithoutTeamInput[] | TeamMembersUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMembersCreateOrConnectWithoutTeamInput | TeamMembersCreateOrConnectWithoutTeamInput[]
    upsert?: TeamMembersUpsertWithWhereUniqueWithoutTeamInput | TeamMembersUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamMembersCreateManyTeamInputEnvelope
    set?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    disconnect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    delete?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    connect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    update?: TeamMembersUpdateWithWhereUniqueWithoutTeamInput | TeamMembersUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamMembersUpdateManyWithWhereWithoutTeamInput | TeamMembersUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamMembersScalarWhereInput | TeamMembersScalarWhereInput[]
  }

  export type TeamTodosUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamTodosCreateWithoutTeamInput, TeamTodosUncheckedCreateWithoutTeamInput> | TeamTodosCreateWithoutTeamInput[] | TeamTodosUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamTodosCreateOrConnectWithoutTeamInput | TeamTodosCreateOrConnectWithoutTeamInput[]
    upsert?: TeamTodosUpsertWithWhereUniqueWithoutTeamInput | TeamTodosUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamTodosCreateManyTeamInputEnvelope
    set?: TeamTodosWhereUniqueInput | TeamTodosWhereUniqueInput[]
    disconnect?: TeamTodosWhereUniqueInput | TeamTodosWhereUniqueInput[]
    delete?: TeamTodosWhereUniqueInput | TeamTodosWhereUniqueInput[]
    connect?: TeamTodosWhereUniqueInput | TeamTodosWhereUniqueInput[]
    update?: TeamTodosUpdateWithWhereUniqueWithoutTeamInput | TeamTodosUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamTodosUpdateManyWithWhereWithoutTeamInput | TeamTodosUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamTodosScalarWhereInput | TeamTodosScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TeamMembersUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamMembersCreateWithoutTeamInput, TeamMembersUncheckedCreateWithoutTeamInput> | TeamMembersCreateWithoutTeamInput[] | TeamMembersUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMembersCreateOrConnectWithoutTeamInput | TeamMembersCreateOrConnectWithoutTeamInput[]
    upsert?: TeamMembersUpsertWithWhereUniqueWithoutTeamInput | TeamMembersUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamMembersCreateManyTeamInputEnvelope
    set?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    disconnect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    delete?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    connect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    update?: TeamMembersUpdateWithWhereUniqueWithoutTeamInput | TeamMembersUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamMembersUpdateManyWithWhereWithoutTeamInput | TeamMembersUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamMembersScalarWhereInput | TeamMembersScalarWhereInput[]
  }

  export type TeamTodosUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamTodosCreateWithoutTeamInput, TeamTodosUncheckedCreateWithoutTeamInput> | TeamTodosCreateWithoutTeamInput[] | TeamTodosUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamTodosCreateOrConnectWithoutTeamInput | TeamTodosCreateOrConnectWithoutTeamInput[]
    upsert?: TeamTodosUpsertWithWhereUniqueWithoutTeamInput | TeamTodosUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamTodosCreateManyTeamInputEnvelope
    set?: TeamTodosWhereUniqueInput | TeamTodosWhereUniqueInput[]
    disconnect?: TeamTodosWhereUniqueInput | TeamTodosWhereUniqueInput[]
    delete?: TeamTodosWhereUniqueInput | TeamTodosWhereUniqueInput[]
    connect?: TeamTodosWhereUniqueInput | TeamTodosWhereUniqueInput[]
    update?: TeamTodosUpdateWithWhereUniqueWithoutTeamInput | TeamTodosUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamTodosUpdateManyWithWhereWithoutTeamInput | TeamTodosUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamTodosScalarWhereInput | TeamTodosScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutMembershipsInput = {
    create?: XOR<UsersCreateWithoutMembershipsInput, UsersUncheckedCreateWithoutMembershipsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMembershipsInput
    connect?: UsersWhereUniqueInput
  }

  export type TeamsCreateNestedOneWithoutMembersInput = {
    create?: XOR<TeamsCreateWithoutMembersInput, TeamsUncheckedCreateWithoutMembersInput>
    connectOrCreate?: TeamsCreateOrConnectWithoutMembersInput
    connect?: TeamsWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutMembershipsNestedInput = {
    create?: XOR<UsersCreateWithoutMembershipsInput, UsersUncheckedCreateWithoutMembershipsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMembershipsInput
    upsert?: UsersUpsertWithoutMembershipsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutMembershipsInput, UsersUpdateWithoutMembershipsInput>, UsersUncheckedUpdateWithoutMembershipsInput>
  }

  export type TeamsUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<TeamsCreateWithoutMembersInput, TeamsUncheckedCreateWithoutMembersInput>
    connectOrCreate?: TeamsCreateOrConnectWithoutMembersInput
    upsert?: TeamsUpsertWithoutMembersInput
    connect?: TeamsWhereUniqueInput
    update?: XOR<XOR<TeamsUpdateToOneWithWhereWithoutMembersInput, TeamsUpdateWithoutMembersInput>, TeamsUncheckedUpdateWithoutMembersInput>
  }

  export type UsersCreateNestedOneWithoutUserTodosInput = {
    create?: XOR<UsersCreateWithoutUserTodosInput, UsersUncheckedCreateWithoutUserTodosInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUserTodosInput
    connect?: UsersWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UsersUpdateOneRequiredWithoutUserTodosNestedInput = {
    create?: XOR<UsersCreateWithoutUserTodosInput, UsersUncheckedCreateWithoutUserTodosInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUserTodosInput
    upsert?: UsersUpsertWithoutUserTodosInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutUserTodosInput, UsersUpdateWithoutUserTodosInput>, UsersUncheckedUpdateWithoutUserTodosInput>
  }

  export type TeamsCreateNestedOneWithoutTeamTodosInput = {
    create?: XOR<TeamsCreateWithoutTeamTodosInput, TeamsUncheckedCreateWithoutTeamTodosInput>
    connectOrCreate?: TeamsCreateOrConnectWithoutTeamTodosInput
    connect?: TeamsWhereUniqueInput
  }

  export type TeamsUpdateOneRequiredWithoutTeamTodosNestedInput = {
    create?: XOR<TeamsCreateWithoutTeamTodosInput, TeamsUncheckedCreateWithoutTeamTodosInput>
    connectOrCreate?: TeamsCreateOrConnectWithoutTeamTodosInput
    upsert?: TeamsUpsertWithoutTeamTodosInput
    connect?: TeamsWhereUniqueInput
    update?: XOR<XOR<TeamsUpdateToOneWithWhereWithoutTeamTodosInput, TeamsUpdateWithoutTeamTodosInput>, TeamsUncheckedUpdateWithoutTeamTodosInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserTodosCreateWithoutUserInput = {
    contents: string
    isDone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTodosUncheckedCreateWithoutUserInput = {
    id?: number
    contents: string
    isDone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTodosCreateOrConnectWithoutUserInput = {
    where: UserTodosWhereUniqueInput
    create: XOR<UserTodosCreateWithoutUserInput, UserTodosUncheckedCreateWithoutUserInput>
  }

  export type UserTodosCreateManyUserInputEnvelope = {
    data: UserTodosCreateManyUserInput | UserTodosCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TeamsCreateWithoutAdminInput = {
    name: string
    members?: TeamMembersCreateNestedManyWithoutTeamInput
    teamTodos?: TeamTodosCreateNestedManyWithoutTeamInput
  }

  export type TeamsUncheckedCreateWithoutAdminInput = {
    id?: number
    name: string
    members?: TeamMembersUncheckedCreateNestedManyWithoutTeamInput
    teamTodos?: TeamTodosUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamsCreateOrConnectWithoutAdminInput = {
    where: TeamsWhereUniqueInput
    create: XOR<TeamsCreateWithoutAdminInput, TeamsUncheckedCreateWithoutAdminInput>
  }

  export type TeamsCreateManyAdminInputEnvelope = {
    data: TeamsCreateManyAdminInput | TeamsCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type TeamMembersCreateWithoutUserInput = {
    team: TeamsCreateNestedOneWithoutMembersInput
  }

  export type TeamMembersUncheckedCreateWithoutUserInput = {
    id?: number
    teamId: number
  }

  export type TeamMembersCreateOrConnectWithoutUserInput = {
    where: TeamMembersWhereUniqueInput
    create: XOR<TeamMembersCreateWithoutUserInput, TeamMembersUncheckedCreateWithoutUserInput>
  }

  export type TeamMembersCreateManyUserInputEnvelope = {
    data: TeamMembersCreateManyUserInput | TeamMembersCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserTodosUpsertWithWhereUniqueWithoutUserInput = {
    where: UserTodosWhereUniqueInput
    update: XOR<UserTodosUpdateWithoutUserInput, UserTodosUncheckedUpdateWithoutUserInput>
    create: XOR<UserTodosCreateWithoutUserInput, UserTodosUncheckedCreateWithoutUserInput>
  }

  export type UserTodosUpdateWithWhereUniqueWithoutUserInput = {
    where: UserTodosWhereUniqueInput
    data: XOR<UserTodosUpdateWithoutUserInput, UserTodosUncheckedUpdateWithoutUserInput>
  }

  export type UserTodosUpdateManyWithWhereWithoutUserInput = {
    where: UserTodosScalarWhereInput
    data: XOR<UserTodosUpdateManyMutationInput, UserTodosUncheckedUpdateManyWithoutUserInput>
  }

  export type UserTodosScalarWhereInput = {
    AND?: UserTodosScalarWhereInput | UserTodosScalarWhereInput[]
    OR?: UserTodosScalarWhereInput[]
    NOT?: UserTodosScalarWhereInput | UserTodosScalarWhereInput[]
    id?: IntFilter<"UserTodos"> | number
    userId?: StringFilter<"UserTodos"> | string
    contents?: StringFilter<"UserTodos"> | string
    isDone?: BoolFilter<"UserTodos"> | boolean
    createdAt?: DateTimeFilter<"UserTodos"> | Date | string
    updatedAt?: DateTimeFilter<"UserTodos"> | Date | string
  }

  export type TeamsUpsertWithWhereUniqueWithoutAdminInput = {
    where: TeamsWhereUniqueInput
    update: XOR<TeamsUpdateWithoutAdminInput, TeamsUncheckedUpdateWithoutAdminInput>
    create: XOR<TeamsCreateWithoutAdminInput, TeamsUncheckedCreateWithoutAdminInput>
  }

  export type TeamsUpdateWithWhereUniqueWithoutAdminInput = {
    where: TeamsWhereUniqueInput
    data: XOR<TeamsUpdateWithoutAdminInput, TeamsUncheckedUpdateWithoutAdminInput>
  }

  export type TeamsUpdateManyWithWhereWithoutAdminInput = {
    where: TeamsScalarWhereInput
    data: XOR<TeamsUpdateManyMutationInput, TeamsUncheckedUpdateManyWithoutAdminInput>
  }

  export type TeamsScalarWhereInput = {
    AND?: TeamsScalarWhereInput | TeamsScalarWhereInput[]
    OR?: TeamsScalarWhereInput[]
    NOT?: TeamsScalarWhereInput | TeamsScalarWhereInput[]
    id?: IntFilter<"Teams"> | number
    name?: StringFilter<"Teams"> | string
    adminId?: StringFilter<"Teams"> | string
  }

  export type TeamMembersUpsertWithWhereUniqueWithoutUserInput = {
    where: TeamMembersWhereUniqueInput
    update: XOR<TeamMembersUpdateWithoutUserInput, TeamMembersUncheckedUpdateWithoutUserInput>
    create: XOR<TeamMembersCreateWithoutUserInput, TeamMembersUncheckedCreateWithoutUserInput>
  }

  export type TeamMembersUpdateWithWhereUniqueWithoutUserInput = {
    where: TeamMembersWhereUniqueInput
    data: XOR<TeamMembersUpdateWithoutUserInput, TeamMembersUncheckedUpdateWithoutUserInput>
  }

  export type TeamMembersUpdateManyWithWhereWithoutUserInput = {
    where: TeamMembersScalarWhereInput
    data: XOR<TeamMembersUpdateManyMutationInput, TeamMembersUncheckedUpdateManyWithoutUserInput>
  }

  export type TeamMembersScalarWhereInput = {
    AND?: TeamMembersScalarWhereInput | TeamMembersScalarWhereInput[]
    OR?: TeamMembersScalarWhereInput[]
    NOT?: TeamMembersScalarWhereInput | TeamMembersScalarWhereInput[]
    id?: IntFilter<"TeamMembers"> | number
    userId?: StringFilter<"TeamMembers"> | string
    teamId?: IntFilter<"TeamMembers"> | number
  }

  export type UsersCreateWithoutTeamsInput = {
    id: string
    password: string
    createdAt?: Date | string
    userTodos?: UserTodosCreateNestedManyWithoutUserInput
    memberships?: TeamMembersCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutTeamsInput = {
    id: string
    password: string
    createdAt?: Date | string
    userTodos?: UserTodosUncheckedCreateNestedManyWithoutUserInput
    memberships?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutTeamsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutTeamsInput, UsersUncheckedCreateWithoutTeamsInput>
  }

  export type TeamMembersCreateWithoutTeamInput = {
    user: UsersCreateNestedOneWithoutMembershipsInput
  }

  export type TeamMembersUncheckedCreateWithoutTeamInput = {
    id?: number
    userId: string
  }

  export type TeamMembersCreateOrConnectWithoutTeamInput = {
    where: TeamMembersWhereUniqueInput
    create: XOR<TeamMembersCreateWithoutTeamInput, TeamMembersUncheckedCreateWithoutTeamInput>
  }

  export type TeamMembersCreateManyTeamInputEnvelope = {
    data: TeamMembersCreateManyTeamInput | TeamMembersCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type TeamTodosCreateWithoutTeamInput = {
    contents: string
    isDone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamTodosUncheckedCreateWithoutTeamInput = {
    id?: number
    contents: string
    isDone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamTodosCreateOrConnectWithoutTeamInput = {
    where: TeamTodosWhereUniqueInput
    create: XOR<TeamTodosCreateWithoutTeamInput, TeamTodosUncheckedCreateWithoutTeamInput>
  }

  export type TeamTodosCreateManyTeamInputEnvelope = {
    data: TeamTodosCreateManyTeamInput | TeamTodosCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutTeamsInput = {
    update: XOR<UsersUpdateWithoutTeamsInput, UsersUncheckedUpdateWithoutTeamsInput>
    create: XOR<UsersCreateWithoutTeamsInput, UsersUncheckedCreateWithoutTeamsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutTeamsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutTeamsInput, UsersUncheckedUpdateWithoutTeamsInput>
  }

  export type UsersUpdateWithoutTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userTodos?: UserTodosUpdateManyWithoutUserNestedInput
    memberships?: TeamMembersUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userTodos?: UserTodosUncheckedUpdateManyWithoutUserNestedInput
    memberships?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TeamMembersUpsertWithWhereUniqueWithoutTeamInput = {
    where: TeamMembersWhereUniqueInput
    update: XOR<TeamMembersUpdateWithoutTeamInput, TeamMembersUncheckedUpdateWithoutTeamInput>
    create: XOR<TeamMembersCreateWithoutTeamInput, TeamMembersUncheckedCreateWithoutTeamInput>
  }

  export type TeamMembersUpdateWithWhereUniqueWithoutTeamInput = {
    where: TeamMembersWhereUniqueInput
    data: XOR<TeamMembersUpdateWithoutTeamInput, TeamMembersUncheckedUpdateWithoutTeamInput>
  }

  export type TeamMembersUpdateManyWithWhereWithoutTeamInput = {
    where: TeamMembersScalarWhereInput
    data: XOR<TeamMembersUpdateManyMutationInput, TeamMembersUncheckedUpdateManyWithoutTeamInput>
  }

  export type TeamTodosUpsertWithWhereUniqueWithoutTeamInput = {
    where: TeamTodosWhereUniqueInput
    update: XOR<TeamTodosUpdateWithoutTeamInput, TeamTodosUncheckedUpdateWithoutTeamInput>
    create: XOR<TeamTodosCreateWithoutTeamInput, TeamTodosUncheckedCreateWithoutTeamInput>
  }

  export type TeamTodosUpdateWithWhereUniqueWithoutTeamInput = {
    where: TeamTodosWhereUniqueInput
    data: XOR<TeamTodosUpdateWithoutTeamInput, TeamTodosUncheckedUpdateWithoutTeamInput>
  }

  export type TeamTodosUpdateManyWithWhereWithoutTeamInput = {
    where: TeamTodosScalarWhereInput
    data: XOR<TeamTodosUpdateManyMutationInput, TeamTodosUncheckedUpdateManyWithoutTeamInput>
  }

  export type TeamTodosScalarWhereInput = {
    AND?: TeamTodosScalarWhereInput | TeamTodosScalarWhereInput[]
    OR?: TeamTodosScalarWhereInput[]
    NOT?: TeamTodosScalarWhereInput | TeamTodosScalarWhereInput[]
    id?: IntFilter<"TeamTodos"> | number
    teamId?: IntFilter<"TeamTodos"> | number
    contents?: StringFilter<"TeamTodos"> | string
    isDone?: BoolFilter<"TeamTodos"> | boolean
    createdAt?: DateTimeFilter<"TeamTodos"> | Date | string
    updatedAt?: DateTimeFilter<"TeamTodos"> | Date | string
  }

  export type UsersCreateWithoutMembershipsInput = {
    id: string
    password: string
    createdAt?: Date | string
    userTodos?: UserTodosCreateNestedManyWithoutUserInput
    teams?: TeamsCreateNestedManyWithoutAdminInput
  }

  export type UsersUncheckedCreateWithoutMembershipsInput = {
    id: string
    password: string
    createdAt?: Date | string
    userTodos?: UserTodosUncheckedCreateNestedManyWithoutUserInput
    teams?: TeamsUncheckedCreateNestedManyWithoutAdminInput
  }

  export type UsersCreateOrConnectWithoutMembershipsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutMembershipsInput, UsersUncheckedCreateWithoutMembershipsInput>
  }

  export type TeamsCreateWithoutMembersInput = {
    name: string
    admin: UsersCreateNestedOneWithoutTeamsInput
    teamTodos?: TeamTodosCreateNestedManyWithoutTeamInput
  }

  export type TeamsUncheckedCreateWithoutMembersInput = {
    id?: number
    name: string
    adminId: string
    teamTodos?: TeamTodosUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamsCreateOrConnectWithoutMembersInput = {
    where: TeamsWhereUniqueInput
    create: XOR<TeamsCreateWithoutMembersInput, TeamsUncheckedCreateWithoutMembersInput>
  }

  export type UsersUpsertWithoutMembershipsInput = {
    update: XOR<UsersUpdateWithoutMembershipsInput, UsersUncheckedUpdateWithoutMembershipsInput>
    create: XOR<UsersCreateWithoutMembershipsInput, UsersUncheckedCreateWithoutMembershipsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutMembershipsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutMembershipsInput, UsersUncheckedUpdateWithoutMembershipsInput>
  }

  export type UsersUpdateWithoutMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userTodos?: UserTodosUpdateManyWithoutUserNestedInput
    teams?: TeamsUpdateManyWithoutAdminNestedInput
  }

  export type UsersUncheckedUpdateWithoutMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userTodos?: UserTodosUncheckedUpdateManyWithoutUserNestedInput
    teams?: TeamsUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type TeamsUpsertWithoutMembersInput = {
    update: XOR<TeamsUpdateWithoutMembersInput, TeamsUncheckedUpdateWithoutMembersInput>
    create: XOR<TeamsCreateWithoutMembersInput, TeamsUncheckedCreateWithoutMembersInput>
    where?: TeamsWhereInput
  }

  export type TeamsUpdateToOneWithWhereWithoutMembersInput = {
    where?: TeamsWhereInput
    data: XOR<TeamsUpdateWithoutMembersInput, TeamsUncheckedUpdateWithoutMembersInput>
  }

  export type TeamsUpdateWithoutMembersInput = {
    name?: StringFieldUpdateOperationsInput | string
    admin?: UsersUpdateOneRequiredWithoutTeamsNestedInput
    teamTodos?: TeamTodosUpdateManyWithoutTeamNestedInput
  }

  export type TeamsUncheckedUpdateWithoutMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    teamTodos?: TeamTodosUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type UsersCreateWithoutUserTodosInput = {
    id: string
    password: string
    createdAt?: Date | string
    teams?: TeamsCreateNestedManyWithoutAdminInput
    memberships?: TeamMembersCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutUserTodosInput = {
    id: string
    password: string
    createdAt?: Date | string
    teams?: TeamsUncheckedCreateNestedManyWithoutAdminInput
    memberships?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutUserTodosInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutUserTodosInput, UsersUncheckedCreateWithoutUserTodosInput>
  }

  export type UsersUpsertWithoutUserTodosInput = {
    update: XOR<UsersUpdateWithoutUserTodosInput, UsersUncheckedUpdateWithoutUserTodosInput>
    create: XOR<UsersCreateWithoutUserTodosInput, UsersUncheckedCreateWithoutUserTodosInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutUserTodosInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutUserTodosInput, UsersUncheckedUpdateWithoutUserTodosInput>
  }

  export type UsersUpdateWithoutUserTodosInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamsUpdateManyWithoutAdminNestedInput
    memberships?: TeamMembersUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutUserTodosInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamsUncheckedUpdateManyWithoutAdminNestedInput
    memberships?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TeamsCreateWithoutTeamTodosInput = {
    name: string
    admin: UsersCreateNestedOneWithoutTeamsInput
    members?: TeamMembersCreateNestedManyWithoutTeamInput
  }

  export type TeamsUncheckedCreateWithoutTeamTodosInput = {
    id?: number
    name: string
    adminId: string
    members?: TeamMembersUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamsCreateOrConnectWithoutTeamTodosInput = {
    where: TeamsWhereUniqueInput
    create: XOR<TeamsCreateWithoutTeamTodosInput, TeamsUncheckedCreateWithoutTeamTodosInput>
  }

  export type TeamsUpsertWithoutTeamTodosInput = {
    update: XOR<TeamsUpdateWithoutTeamTodosInput, TeamsUncheckedUpdateWithoutTeamTodosInput>
    create: XOR<TeamsCreateWithoutTeamTodosInput, TeamsUncheckedCreateWithoutTeamTodosInput>
    where?: TeamsWhereInput
  }

  export type TeamsUpdateToOneWithWhereWithoutTeamTodosInput = {
    where?: TeamsWhereInput
    data: XOR<TeamsUpdateWithoutTeamTodosInput, TeamsUncheckedUpdateWithoutTeamTodosInput>
  }

  export type TeamsUpdateWithoutTeamTodosInput = {
    name?: StringFieldUpdateOperationsInput | string
    admin?: UsersUpdateOneRequiredWithoutTeamsNestedInput
    members?: TeamMembersUpdateManyWithoutTeamNestedInput
  }

  export type TeamsUncheckedUpdateWithoutTeamTodosInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    members?: TeamMembersUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type UserTodosCreateManyUserInput = {
    id?: number
    contents: string
    isDone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamsCreateManyAdminInput = {
    id?: number
    name: string
  }

  export type TeamMembersCreateManyUserInput = {
    id?: number
    teamId: number
  }

  export type UserTodosUpdateWithoutUserInput = {
    contents?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTodosUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    contents?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTodosUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    contents?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamsUpdateWithoutAdminInput = {
    name?: StringFieldUpdateOperationsInput | string
    members?: TeamMembersUpdateManyWithoutTeamNestedInput
    teamTodos?: TeamTodosUpdateManyWithoutTeamNestedInput
  }

  export type TeamsUncheckedUpdateWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    members?: TeamMembersUncheckedUpdateManyWithoutTeamNestedInput
    teamTodos?: TeamTodosUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamsUncheckedUpdateManyWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TeamMembersUpdateWithoutUserInput = {
    team?: TeamsUpdateOneRequiredWithoutMembersNestedInput
  }

  export type TeamMembersUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type TeamMembersUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type TeamMembersCreateManyTeamInput = {
    id?: number
    userId: string
  }

  export type TeamTodosCreateManyTeamInput = {
    id?: number
    contents: string
    isDone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamMembersUpdateWithoutTeamInput = {
    user?: UsersUpdateOneRequiredWithoutMembershipsNestedInput
  }

  export type TeamMembersUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TeamMembersUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TeamTodosUpdateWithoutTeamInput = {
    contents?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamTodosUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    contents?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamTodosUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    contents?: StringFieldUpdateOperationsInput | string
    isDone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}